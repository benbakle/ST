'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="qpdatabase")>  _
Partial Public Class QPriceDataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertTemperature(instance As Temperature)
    End Sub
  Partial Private Sub UpdateTemperature(instance As Temperature)
    End Sub
  Partial Private Sub DeleteTemperature(instance As Temperature)
    End Sub
  Partial Private Sub InsertUM(instance As UM)
    End Sub
  Partial Private Sub UpdateUM(instance As UM)
    End Sub
  Partial Private Sub DeleteUM(instance As UM)
    End Sub
  Partial Private Sub InsertComponentCatagory(instance As ComponentCatagory)
    End Sub
  Partial Private Sub UpdateComponentCatagory(instance As ComponentCatagory)
    End Sub
  Partial Private Sub DeleteComponentCatagory(instance As ComponentCatagory)
    End Sub
  Partial Private Sub InsertCalibration(instance As Calibration)
    End Sub
  Partial Private Sub UpdateCalibration(instance As Calibration)
    End Sub
  Partial Private Sub DeleteCalibration(instance As Calibration)
    End Sub
  Partial Private Sub InsertDiscount(instance As Discount)
    End Sub
  Partial Private Sub UpdateDiscount(instance As Discount)
    End Sub
  Partial Private Sub DeleteDiscount(instance As Discount)
    End Sub
  Partial Private Sub InsertUserRole(instance As UserRole)
    End Sub
  Partial Private Sub UpdateUserRole(instance As UserRole)
    End Sub
  Partial Private Sub DeleteUserRole(instance As UserRole)
    End Sub
  Partial Private Sub InsertConstant(instance As Constant)
    End Sub
  Partial Private Sub UpdateConstant(instance As Constant)
    End Sub
  Partial Private Sub DeleteConstant(instance As Constant)
    End Sub
  Partial Private Sub InsertSingleDual(instance As SingleDual)
    End Sub
  Partial Private Sub UpdateSingleDual(instance As SingleDual)
    End Sub
  Partial Private Sub DeleteSingleDual(instance As SingleDual)
    End Sub
  Partial Private Sub InsertNPT(instance As NPT)
    End Sub
  Partial Private Sub UpdateNPT(instance As NPT)
    End Sub
  Partial Private Sub DeleteNPT(instance As NPT)
    End Sub
  Partial Private Sub InsertOD(instance As OD)
    End Sub
  Partial Private Sub UpdateOD(instance As OD)
    End Sub
  Partial Private Sub DeleteOD(instance As OD)
    End Sub
  Partial Private Sub InsertComponent(instance As Component)
    End Sub
  Partial Private Sub UpdateComponent(instance As Component)
    End Sub
  Partial Private Sub DeleteComponent(instance As Component)
    End Sub
  Partial Private Sub InsertSensorType(instance As SensorType)
    End Sub
  Partial Private Sub UpdateSensorType(instance As SensorType)
    End Sub
  Partial Private Sub DeleteSensorType(instance As SensorType)
    End Sub
  Partial Private Sub InsertCostComponentKey(instance As CostComponentKey)
    End Sub
  Partial Private Sub UpdateCostComponentKey(instance As CostComponentKey)
    End Sub
  Partial Private Sub DeleteCostComponentKey(instance As CostComponentKey)
    End Sub
  Partial Private Sub InsertCostType(instance As CostType)
    End Sub
  Partial Private Sub UpdateCostType(instance As CostType)
    End Sub
  Partial Private Sub DeleteCostType(instance As CostType)
    End Sub
  Partial Private Sub InsertWireCount(instance As WireCount)
    End Sub
  Partial Private Sub UpdateWireCount(instance As WireCount)
    End Sub
  Partial Private Sub DeleteWireCount(instance As WireCount)
    End Sub
  Partial Private Sub InsertMaterial(instance As Material)
    End Sub
  Partial Private Sub UpdateMaterial(instance As Material)
    End Sub
  Partial Private Sub DeleteMaterial(instance As Material)
    End Sub
  Partial Private Sub InsertMIType(instance As MIType)
    End Sub
  Partial Private Sub UpdateMIType(instance As MIType)
    End Sub
  Partial Private Sub DeleteMIType(instance As MIType)
    End Sub
  Partial Private Sub InsertCIPCatagory(instance As CIPCatagory)
    End Sub
  Partial Private Sub UpdateCIPCatagory(instance As CIPCatagory)
    End Sub
  Partial Private Sub DeleteCIPCatagory(instance As CIPCatagory)
    End Sub
  Partial Private Sub InsertIPCatagory(instance As IPCatagory)
    End Sub
  Partial Private Sub UpdateIPCatagory(instance As IPCatagory)
    End Sub
  Partial Private Sub DeleteIPCatagory(instance As IPCatagory)
    End Sub
  Partial Private Sub InsertIPType(instance As IPType)
    End Sub
  Partial Private Sub UpdateIPType(instance As IPType)
    End Sub
  Partial Private Sub DeleteIPType(instance As IPType)
    End Sub
  Partial Private Sub InsertTWConfiguration(instance As TWConfiguration)
    End Sub
  Partial Private Sub UpdateTWConfiguration(instance As TWConfiguration)
    End Sub
  Partial Private Sub DeleteTWConfiguration(instance As TWConfiguration)
    End Sub
  Partial Private Sub InsertTWExtLength(instance As TWExtLength)
    End Sub
  Partial Private Sub UpdateTWExtLength(instance As TWExtLength)
    End Sub
  Partial Private Sub DeleteTWExtLength(instance As TWExtLength)
    End Sub
  Partial Private Sub InsertCompany(instance As Company)
    End Sub
  Partial Private Sub UpdateCompany(instance As Company)
    End Sub
  Partial Private Sub DeleteCompany(instance As Company)
    End Sub
  Partial Private Sub InsertCustomer(instance As Customer)
    End Sub
  Partial Private Sub UpdateCustomer(instance As Customer)
    End Sub
  Partial Private Sub DeleteCustomer(instance As Customer)
    End Sub
  Partial Private Sub InsertQCOption(instance As QCOption)
    End Sub
  Partial Private Sub UpdateQCOption(instance As QCOption)
    End Sub
  Partial Private Sub DeleteQCOption(instance As QCOption)
    End Sub
  Partial Private Sub InsertCostUp(instance As CostUp)
    End Sub
  Partial Private Sub UpdateCostUp(instance As CostUp)
    End Sub
  Partial Private Sub DeleteCostUp(instance As CostUp)
    End Sub
  Partial Private Sub InsertExtBaseCost(instance As ExtBaseCost)
    End Sub
  Partial Private Sub UpdateExtBaseCost(instance As ExtBaseCost)
    End Sub
  Partial Private Sub DeleteExtBaseCost(instance As ExtBaseCost)
    End Sub
  Partial Private Sub InsertDistStateKey(instance As DistStateKey)
    End Sub
  Partial Private Sub UpdateDistStateKey(instance As DistStateKey)
    End Sub
  Partial Private Sub DeleteDistStateKey(instance As DistStateKey)
    End Sub
  Partial Private Sub InsertState(instance As State)
    End Sub
  Partial Private Sub UpdateState(instance As State)
    End Sub
  Partial Private Sub DeleteState(instance As State)
    End Sub
  Partial Private Sub InsertPageType(instance As PageType)
    End Sub
  Partial Private Sub UpdatePageType(instance As PageType)
    End Sub
  Partial Private Sub DeletePageType(instance As PageType)
    End Sub
  Partial Private Sub InsertPage(instance As Page)
    End Sub
  Partial Private Sub UpdatePage(instance As Page)
    End Sub
  Partial Private Sub DeletePage(instance As Page)
    End Sub
  Partial Private Sub InsertDistributor(instance As Distributor)
    End Sub
  Partial Private Sub UpdateDistributor(instance As Distributor)
    End Sub
  Partial Private Sub DeleteDistributor(instance As Distributor)
    End Sub
  Partial Private Sub InsertSanitaryWellCost(instance As SanitaryWellCost)
    End Sub
  Partial Private Sub UpdateSanitaryWellCost(instance As SanitaryWellCost)
    End Sub
  Partial Private Sub DeleteSanitaryWellCost(instance As SanitaryWellCost)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("QPdatabaseConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Temperatures() As System.Data.Linq.Table(Of Temperature)
		Get
			Return Me.GetTable(Of Temperature)
		End Get
	End Property
	
	Public ReadOnly Property UMs() As System.Data.Linq.Table(Of UM)
		Get
			Return Me.GetTable(Of UM)
		End Get
	End Property
	
	Public ReadOnly Property ComponentCatagories() As System.Data.Linq.Table(Of ComponentCatagory)
		Get
			Return Me.GetTable(Of ComponentCatagory)
		End Get
	End Property
	
	Public ReadOnly Property Calibrations() As System.Data.Linq.Table(Of Calibration)
		Get
			Return Me.GetTable(Of Calibration)
		End Get
	End Property
	
	Public ReadOnly Property Discounts() As System.Data.Linq.Table(Of Discount)
		Get
			Return Me.GetTable(Of Discount)
		End Get
	End Property
	
	Public ReadOnly Property UserRoles() As System.Data.Linq.Table(Of UserRole)
		Get
			Return Me.GetTable(Of UserRole)
		End Get
	End Property
	
	Public ReadOnly Property Constants() As System.Data.Linq.Table(Of Constant)
		Get
			Return Me.GetTable(Of Constant)
		End Get
	End Property
	
	Public ReadOnly Property SingleDuals() As System.Data.Linq.Table(Of SingleDual)
		Get
			Return Me.GetTable(Of SingleDual)
		End Get
	End Property
	
	Public ReadOnly Property NPTs() As System.Data.Linq.Table(Of NPT)
		Get
			Return Me.GetTable(Of NPT)
		End Get
	End Property
	
	Public ReadOnly Property ODs() As System.Data.Linq.Table(Of OD)
		Get
			Return Me.GetTable(Of OD)
		End Get
	End Property
	
	Public ReadOnly Property Components() As System.Data.Linq.Table(Of Component)
		Get
			Return Me.GetTable(Of Component)
		End Get
	End Property
	
	Public ReadOnly Property SensorTypes() As System.Data.Linq.Table(Of SensorType)
		Get
			Return Me.GetTable(Of SensorType)
		End Get
	End Property
	
	Public ReadOnly Property CostComponentKeys() As System.Data.Linq.Table(Of CostComponentKey)
		Get
			Return Me.GetTable(Of CostComponentKey)
		End Get
	End Property
	
	Public ReadOnly Property CostTypes() As System.Data.Linq.Table(Of CostType)
		Get
			Return Me.GetTable(Of CostType)
		End Get
	End Property
	
	Public ReadOnly Property WireCounts() As System.Data.Linq.Table(Of WireCount)
		Get
			Return Me.GetTable(Of WireCount)
		End Get
	End Property
	
	Public ReadOnly Property Materials() As System.Data.Linq.Table(Of Material)
		Get
			Return Me.GetTable(Of Material)
		End Get
	End Property
	
	Public ReadOnly Property MITypes() As System.Data.Linq.Table(Of MIType)
		Get
			Return Me.GetTable(Of MIType)
		End Get
	End Property
	
	Public ReadOnly Property CIPCatagories() As System.Data.Linq.Table(Of CIPCatagory)
		Get
			Return Me.GetTable(Of CIPCatagory)
		End Get
	End Property
	
	Public ReadOnly Property IPCatagories() As System.Data.Linq.Table(Of IPCatagory)
		Get
			Return Me.GetTable(Of IPCatagory)
		End Get
	End Property
	
	Public ReadOnly Property IPTypes() As System.Data.Linq.Table(Of IPType)
		Get
			Return Me.GetTable(Of IPType)
		End Get
	End Property
	
	Public ReadOnly Property TWConfigurations() As System.Data.Linq.Table(Of TWConfiguration)
		Get
			Return Me.GetTable(Of TWConfiguration)
		End Get
	End Property
	
	Public ReadOnly Property TWExtLengths() As System.Data.Linq.Table(Of TWExtLength)
		Get
			Return Me.GetTable(Of TWExtLength)
		End Get
	End Property
	
	Public ReadOnly Property Companies() As System.Data.Linq.Table(Of Company)
		Get
			Return Me.GetTable(Of Company)
		End Get
	End Property
	
	Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
		Get
			Return Me.GetTable(Of Customer)
		End Get
	End Property
	
	Public ReadOnly Property QCOptions() As System.Data.Linq.Table(Of QCOption)
		Get
			Return Me.GetTable(Of QCOption)
		End Get
	End Property
	
	Public ReadOnly Property CostUps() As System.Data.Linq.Table(Of CostUp)
		Get
			Return Me.GetTable(Of CostUp)
		End Get
	End Property
	
	Public ReadOnly Property ExtBaseCosts() As System.Data.Linq.Table(Of ExtBaseCost)
		Get
			Return Me.GetTable(Of ExtBaseCost)
		End Get
	End Property
	
	Public ReadOnly Property DistStateKeys() As System.Data.Linq.Table(Of DistStateKey)
		Get
			Return Me.GetTable(Of DistStateKey)
		End Get
	End Property
	
	Public ReadOnly Property States() As System.Data.Linq.Table(Of State)
		Get
			Return Me.GetTable(Of State)
		End Get
	End Property
	
	Public ReadOnly Property PageTypes() As System.Data.Linq.Table(Of PageType)
		Get
			Return Me.GetTable(Of PageType)
		End Get
	End Property
	
	Public ReadOnly Property Pages() As System.Data.Linq.Table(Of Page)
		Get
			Return Me.GetTable(Of Page)
		End Get
	End Property
	
	Public ReadOnly Property Distributors() As System.Data.Linq.Table(Of Distributor)
		Get
			Return Me.GetTable(Of Distributor)
		End Get
	End Property
	
	Public ReadOnly Property SanitaryWellCosts() As System.Data.Linq.Table(Of SanitaryWellCost)
		Get
			Return Me.GetTable(Of SanitaryWellCost)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Temperature")>  _
Partial Public Class Temperature
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TempID As Long
	
	Private _TempDesc As String
	
	Private _TempCode As String
	
	Private _CostUps As EntitySet(Of CostUp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTempIDChanging(value As Long)
    End Sub
    Partial Private Sub OnTempIDChanged()
    End Sub
    Partial Private Sub OnTempDescChanging(value As String)
    End Sub
    Partial Private Sub OnTempDescChanged()
    End Sub
    Partial Private Sub OnTempCodeChanging(value As String)
    End Sub
    Partial Private Sub OnTempCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CostUps = New EntitySet(Of CostUp)(AddressOf Me.attach_CostUps, AddressOf Me.detach_CostUps)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TempID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TempID() As Long
		Get
			Return Me._TempID
		End Get
		Set
			If ((Me._TempID = value)  _
						= false) Then
				Me.OnTempIDChanging(value)
				Me.SendPropertyChanging
				Me._TempID = value
				Me.SendPropertyChanged("TempID")
				Me.OnTempIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TempDesc", DbType:="NVarChar(50)")>  _
	Public Property TempDesc() As String
		Get
			Return Me._TempDesc
		End Get
		Set
			If (String.Equals(Me._TempDesc, value) = false) Then
				Me.OnTempDescChanging(value)
				Me.SendPropertyChanging
				Me._TempDesc = value
				Me.SendPropertyChanged("TempDesc")
				Me.OnTempDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TempCode", DbType:="NVarChar(50)")>  _
	Public Property TempCode() As String
		Get
			Return Me._TempCode
		End Get
		Set
			If (String.Equals(Me._TempCode, value) = false) Then
				Me.OnTempCodeChanging(value)
				Me.SendPropertyChanging
				Me._TempCode = value
				Me.SendPropertyChanged("TempCode")
				Me.OnTempCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Temperature_CostUp", Storage:="_CostUps", ThisKey:="TempID", OtherKey:="Temp_ID")>  _
	Public Property CostUps() As EntitySet(Of CostUp)
		Get
			Return Me._CostUps
		End Get
		Set
			Me._CostUps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.Temperature = Me
	End Sub
	
	Private Sub detach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.Temperature = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UM")>  _
Partial Public Class UM
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UMID As Long
	
	Private _UMDesc As String
	
	Private _Components As EntitySet(Of Component)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUMIDChanging(value As Long)
    End Sub
    Partial Private Sub OnUMIDChanged()
    End Sub
    Partial Private Sub OnUMDescChanging(value As String)
    End Sub
    Partial Private Sub OnUMDescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Components = New EntitySet(Of Component)(AddressOf Me.attach_Components, AddressOf Me.detach_Components)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UMID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UMID() As Long
		Get
			Return Me._UMID
		End Get
		Set
			If ((Me._UMID = value)  _
						= false) Then
				Me.OnUMIDChanging(value)
				Me.SendPropertyChanging
				Me._UMID = value
				Me.SendPropertyChanged("UMID")
				Me.OnUMIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UMDesc", DbType:="NVarChar(50)")>  _
	Public Property UMDesc() As String
		Get
			Return Me._UMDesc
		End Get
		Set
			If (String.Equals(Me._UMDesc, value) = false) Then
				Me.OnUMDescChanging(value)
				Me.SendPropertyChanging
				Me._UMDesc = value
				Me.SendPropertyChanged("UMDesc")
				Me.OnUMDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UM_Component", Storage:="_Components", ThisKey:="UMID", OtherKey:="UM_ID")>  _
	Public Property Components() As EntitySet(Of Component)
		Get
			Return Me._Components
		End Get
		Set
			Me._Components.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.UM = Me
	End Sub
	
	Private Sub detach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.UM = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ComponentCatagory")>  _
Partial Public Class ComponentCatagory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CatagoryID As Long
	
	Private _CatagoryDesc As String
	
	Private _CatagoryInvCode As System.Nullable(Of Long)
	
	Private _Components As EntitySet(Of Component)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCatagoryIDChanging(value As Long)
    End Sub
    Partial Private Sub OnCatagoryIDChanged()
    End Sub
    Partial Private Sub OnCatagoryDescChanging(value As String)
    End Sub
    Partial Private Sub OnCatagoryDescChanged()
    End Sub
    Partial Private Sub OnCatagoryInvCodeChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCatagoryInvCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Components = New EntitySet(Of Component)(AddressOf Me.attach_Components, AddressOf Me.detach_Components)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CatagoryID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CatagoryID() As Long
		Get
			Return Me._CatagoryID
		End Get
		Set
			If ((Me._CatagoryID = value)  _
						= false) Then
				Me.OnCatagoryIDChanging(value)
				Me.SendPropertyChanging
				Me._CatagoryID = value
				Me.SendPropertyChanged("CatagoryID")
				Me.OnCatagoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CatagoryDesc", DbType:="NVarChar(50)")>  _
	Public Property CatagoryDesc() As String
		Get
			Return Me._CatagoryDesc
		End Get
		Set
			If (String.Equals(Me._CatagoryDesc, value) = false) Then
				Me.OnCatagoryDescChanging(value)
				Me.SendPropertyChanging
				Me._CatagoryDesc = value
				Me.SendPropertyChanged("CatagoryDesc")
				Me.OnCatagoryDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CatagoryInvCode", DbType:="BigInt")>  _
	Public Property CatagoryInvCode() As System.Nullable(Of Long)
		Get
			Return Me._CatagoryInvCode
		End Get
		Set
			If (Me._CatagoryInvCode.Equals(value) = false) Then
				Me.OnCatagoryInvCodeChanging(value)
				Me.SendPropertyChanging
				Me._CatagoryInvCode = value
				Me.SendPropertyChanged("CatagoryInvCode")
				Me.OnCatagoryInvCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ComponentCatagory_Component", Storage:="_Components", ThisKey:="CatagoryID", OtherKey:="Catagory_ID")>  _
	Public Property Components() As EntitySet(Of Component)
		Get
			Return Me._Components
		End Get
		Set
			Me._Components.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.ComponentCatagory = Me
	End Sub
	
	Private Sub detach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.ComponentCatagory = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Calibration")>  _
Partial Public Class Calibration
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CalID As Long
	
	Private _CalCode As String
	
	Private _CalDesc As String
	
	Private _Components As EntitySet(Of Component)
	
	Private _CostUps As EntitySet(Of CostUp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCalIDChanging(value As Long)
    End Sub
    Partial Private Sub OnCalIDChanged()
    End Sub
    Partial Private Sub OnCalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCalCodeChanged()
    End Sub
    Partial Private Sub OnCalDescChanging(value As String)
    End Sub
    Partial Private Sub OnCalDescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Components = New EntitySet(Of Component)(AddressOf Me.attach_Components, AddressOf Me.detach_Components)
		Me._CostUps = New EntitySet(Of CostUp)(AddressOf Me.attach_CostUps, AddressOf Me.detach_CostUps)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CalID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CalID() As Long
		Get
			Return Me._CalID
		End Get
		Set
			If ((Me._CalID = value)  _
						= false) Then
				Me.OnCalIDChanging(value)
				Me.SendPropertyChanging
				Me._CalID = value
				Me.SendPropertyChanged("CalID")
				Me.OnCalIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CalCode", DbType:="NChar(10)")>  _
	Public Property CalCode() As String
		Get
			Return Me._CalCode
		End Get
		Set
			If (String.Equals(Me._CalCode, value) = false) Then
				Me.OnCalCodeChanging(value)
				Me.SendPropertyChanging
				Me._CalCode = value
				Me.SendPropertyChanged("CalCode")
				Me.OnCalCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CalDesc", DbType:="NVarChar(50)")>  _
	Public Property CalDesc() As String
		Get
			Return Me._CalDesc
		End Get
		Set
			If (String.Equals(Me._CalDesc, value) = false) Then
				Me.OnCalDescChanging(value)
				Me.SendPropertyChanging
				Me._CalDesc = value
				Me.SendPropertyChanged("CalDesc")
				Me.OnCalDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Calibration_Component", Storage:="_Components", ThisKey:="CalID", OtherKey:="Cal_ID")>  _
	Public Property Components() As EntitySet(Of Component)
		Get
			Return Me._Components
		End Get
		Set
			Me._Components.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Calibration_CostUp", Storage:="_CostUps", ThisKey:="CalID", OtherKey:="Cal_ID")>  _
	Public Property CostUps() As EntitySet(Of CostUp)
		Get
			Return Me._CostUps
		End Get
		Set
			Me._CostUps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.Calibration = Me
	End Sub
	
	Private Sub detach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.Calibration = Nothing
	End Sub
	
	Private Sub attach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.Calibration = Me
	End Sub
	
	Private Sub detach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.Calibration = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Discount")>  _
Partial Public Class Discount
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DiscountID As Long
	
	Private _DisountCode As String
	
	Private _DiscountDesc As String
	
	Private _Companies As EntitySet(Of Company)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDiscountIDChanging(value As Long)
    End Sub
    Partial Private Sub OnDiscountIDChanged()
    End Sub
    Partial Private Sub OnDisountCodeChanging(value As String)
    End Sub
    Partial Private Sub OnDisountCodeChanged()
    End Sub
    Partial Private Sub OnDiscountDescChanging(value As String)
    End Sub
    Partial Private Sub OnDiscountDescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Companies = New EntitySet(Of Company)(AddressOf Me.attach_Companies, AddressOf Me.detach_Companies)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiscountID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DiscountID() As Long
		Get
			Return Me._DiscountID
		End Get
		Set
			If ((Me._DiscountID = value)  _
						= false) Then
				Me.OnDiscountIDChanging(value)
				Me.SendPropertyChanging
				Me._DiscountID = value
				Me.SendPropertyChanged("DiscountID")
				Me.OnDiscountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisountCode", DbType:="NChar(10)")>  _
	Public Property DisountCode() As String
		Get
			Return Me._DisountCode
		End Get
		Set
			If (String.Equals(Me._DisountCode, value) = false) Then
				Me.OnDisountCodeChanging(value)
				Me.SendPropertyChanging
				Me._DisountCode = value
				Me.SendPropertyChanged("DisountCode")
				Me.OnDisountCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiscountDesc", DbType:="NVarChar(50)")>  _
	Public Property DiscountDesc() As String
		Get
			Return Me._DiscountDesc
		End Get
		Set
			If (String.Equals(Me._DiscountDesc, value) = false) Then
				Me.OnDiscountDescChanging(value)
				Me.SendPropertyChanging
				Me._DiscountDesc = value
				Me.SendPropertyChanged("DiscountDesc")
				Me.OnDiscountDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Discount_Company", Storage:="_Companies", ThisKey:="DiscountID", OtherKey:="Discount_ID")>  _
	Public Property Companies() As EntitySet(Of Company)
		Get
			Return Me._Companies
		End Get
		Set
			Me._Companies.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Companies(ByVal entity As Company)
		Me.SendPropertyChanging
		entity.Discount = Me
	End Sub
	
	Private Sub detach_Companies(ByVal entity As Company)
		Me.SendPropertyChanging
		entity.Discount = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserRole")>  _
Partial Public Class UserRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RoleID As Long
	
	Private _RoleDesc As String
	
	Private _Customers As EntitySet(Of Customer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As Long)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    Partial Private Sub OnRoleDescChanging(value As String)
    End Sub
    Partial Private Sub OnRoleDescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Customers = New EntitySet(Of Customer)(AddressOf Me.attach_Customers, AddressOf Me.detach_Customers)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RoleID() As Long
		Get
			Return Me._RoleID
		End Get
		Set
			If ((Me._RoleID = value)  _
						= false) Then
				Me.OnRoleIDChanging(value)
				Me.SendPropertyChanging
				Me._RoleID = value
				Me.SendPropertyChanged("RoleID")
				Me.OnRoleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleDesc", DbType:="NVarChar(50)")>  _
	Public Property RoleDesc() As String
		Get
			Return Me._RoleDesc
		End Get
		Set
			If (String.Equals(Me._RoleDesc, value) = false) Then
				Me.OnRoleDescChanging(value)
				Me.SendPropertyChanging
				Me._RoleDesc = value
				Me.SendPropertyChanged("RoleDesc")
				Me.OnRoleDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserRole_Customer", Storage:="_Customers", ThisKey:="RoleID", OtherKey:="Role_ID")>  _
	Public Property Customers() As EntitySet(Of Customer)
		Get
			Return Me._Customers
		End Get
		Set
			Me._Customers.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Customers(ByVal entity As Customer)
		Me.SendPropertyChanging
		entity.UserRole = Me
	End Sub
	
	Private Sub detach_Customers(ByVal entity As Customer)
		Me.SendPropertyChanging
		entity.UserRole = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Constant")>  _
Partial Public Class Constant
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ConstantID As Long
	
	Private _ConstantDesc As String
	
	Private _ConstantValue As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnConstantIDChanging(value As Long)
    End Sub
    Partial Private Sub OnConstantIDChanged()
    End Sub
    Partial Private Sub OnConstantDescChanging(value As String)
    End Sub
    Partial Private Sub OnConstantDescChanged()
    End Sub
    Partial Private Sub OnConstantValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnConstantValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConstantID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ConstantID() As Long
		Get
			Return Me._ConstantID
		End Get
		Set
			If ((Me._ConstantID = value)  _
						= false) Then
				Me.OnConstantIDChanging(value)
				Me.SendPropertyChanging
				Me._ConstantID = value
				Me.SendPropertyChanged("ConstantID")
				Me.OnConstantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConstantDesc", DbType:="NVarChar(50)")>  _
	Public Property ConstantDesc() As String
		Get
			Return Me._ConstantDesc
		End Get
		Set
			If (String.Equals(Me._ConstantDesc, value) = false) Then
				Me.OnConstantDescChanging(value)
				Me.SendPropertyChanging
				Me._ConstantDesc = value
				Me.SendPropertyChanged("ConstantDesc")
				Me.OnConstantDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConstantValue", DbType:="Decimal(18,0)")>  _
	Public Property ConstantValue() As System.Nullable(Of Decimal)
		Get
			Return Me._ConstantValue
		End Get
		Set
			If (Me._ConstantValue.Equals(value) = false) Then
				Me.OnConstantValueChanging(value)
				Me.SendPropertyChanging
				Me._ConstantValue = value
				Me.SendPropertyChanged("ConstantValue")
				Me.OnConstantValueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SingleDual")>  _
Partial Public Class SingleDual
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SingleDualID As Long
	
	Private _SingleDualCode As String
	
	Private _SingleDualDesc As String
	
	Private _Components As EntitySet(Of Component)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSingleDualIDChanging(value As Long)
    End Sub
    Partial Private Sub OnSingleDualIDChanged()
    End Sub
    Partial Private Sub OnSingleDualCodeChanging(value As String)
    End Sub
    Partial Private Sub OnSingleDualCodeChanged()
    End Sub
    Partial Private Sub OnSingleDualDescChanging(value As String)
    End Sub
    Partial Private Sub OnSingleDualDescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Components = New EntitySet(Of Component)(AddressOf Me.attach_Components, AddressOf Me.detach_Components)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SingleDualID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SingleDualID() As Long
		Get
			Return Me._SingleDualID
		End Get
		Set
			If ((Me._SingleDualID = value)  _
						= false) Then
				Me.OnSingleDualIDChanging(value)
				Me.SendPropertyChanging
				Me._SingleDualID = value
				Me.SendPropertyChanged("SingleDualID")
				Me.OnSingleDualIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SingleDualCode", DbType:="NChar(10)")>  _
	Public Property SingleDualCode() As String
		Get
			Return Me._SingleDualCode
		End Get
		Set
			If (String.Equals(Me._SingleDualCode, value) = false) Then
				Me.OnSingleDualCodeChanging(value)
				Me.SendPropertyChanging
				Me._SingleDualCode = value
				Me.SendPropertyChanged("SingleDualCode")
				Me.OnSingleDualCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SingleDualDesc", DbType:="NVarChar(50)")>  _
	Public Property SingleDualDesc() As String
		Get
			Return Me._SingleDualDesc
		End Get
		Set
			If (String.Equals(Me._SingleDualDesc, value) = false) Then
				Me.OnSingleDualDescChanging(value)
				Me.SendPropertyChanging
				Me._SingleDualDesc = value
				Me.SendPropertyChanged("SingleDualDesc")
				Me.OnSingleDualDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SingleDual_Component", Storage:="_Components", ThisKey:="SingleDualID", OtherKey:="SingleDual_ID")>  _
	Public Property Components() As EntitySet(Of Component)
		Get
			Return Me._Components
		End Get
		Set
			Me._Components.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.SingleDual = Me
	End Sub
	
	Private Sub detach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.SingleDual = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.NPT")>  _
Partial Public Class NPT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NPTID As Long
	
	Private _NPTCode As String
	
	Private _NPTDesc As String
	
	Private _Components As EntitySet(Of Component)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNPTIDChanging(value As Long)
    End Sub
    Partial Private Sub OnNPTIDChanged()
    End Sub
    Partial Private Sub OnNPTCodeChanging(value As String)
    End Sub
    Partial Private Sub OnNPTCodeChanged()
    End Sub
    Partial Private Sub OnNPTDescChanging(value As String)
    End Sub
    Partial Private Sub OnNPTDescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Components = New EntitySet(Of Component)(AddressOf Me.attach_Components, AddressOf Me.detach_Components)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NPTID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property NPTID() As Long
		Get
			Return Me._NPTID
		End Get
		Set
			If ((Me._NPTID = value)  _
						= false) Then
				Me.OnNPTIDChanging(value)
				Me.SendPropertyChanging
				Me._NPTID = value
				Me.SendPropertyChanged("NPTID")
				Me.OnNPTIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NPTCode", DbType:="NChar(10)")>  _
	Public Property NPTCode() As String
		Get
			Return Me._NPTCode
		End Get
		Set
			If (String.Equals(Me._NPTCode, value) = false) Then
				Me.OnNPTCodeChanging(value)
				Me.SendPropertyChanging
				Me._NPTCode = value
				Me.SendPropertyChanged("NPTCode")
				Me.OnNPTCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NPTDesc", DbType:="NVarChar(50)")>  _
	Public Property NPTDesc() As String
		Get
			Return Me._NPTDesc
		End Get
		Set
			If (String.Equals(Me._NPTDesc, value) = false) Then
				Me.OnNPTDescChanging(value)
				Me.SendPropertyChanging
				Me._NPTDesc = value
				Me.SendPropertyChanged("NPTDesc")
				Me.OnNPTDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NPT_Component", Storage:="_Components", ThisKey:="NPTID", OtherKey:="NPT_ID")>  _
	Public Property Components() As EntitySet(Of Component)
		Get
			Return Me._Components
		End Get
		Set
			Me._Components.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.NPT = Me
	End Sub
	
	Private Sub detach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.NPT = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OD")>  _
Partial Public Class OD
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ODID As Long
	
	Private _ODCode As String
	
	Private _ODDecimal As System.Nullable(Of Decimal)
	
	Private _Components As EntitySet(Of Component)
	
	Private _CostUps As EntitySet(Of CostUp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnODIDChanging(value As Long)
    End Sub
    Partial Private Sub OnODIDChanged()
    End Sub
    Partial Private Sub OnODCodeChanging(value As String)
    End Sub
    Partial Private Sub OnODCodeChanged()
    End Sub
    Partial Private Sub OnODDecimalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnODDecimalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Components = New EntitySet(Of Component)(AddressOf Me.attach_Components, AddressOf Me.detach_Components)
		Me._CostUps = New EntitySet(Of CostUp)(AddressOf Me.attach_CostUps, AddressOf Me.detach_CostUps)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ODID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ODID() As Long
		Get
			Return Me._ODID
		End Get
		Set
			If ((Me._ODID = value)  _
						= false) Then
				Me.OnODIDChanging(value)
				Me.SendPropertyChanging
				Me._ODID = value
				Me.SendPropertyChanged("ODID")
				Me.OnODIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ODCode", DbType:="NChar(10)")>  _
	Public Property ODCode() As String
		Get
			Return Me._ODCode
		End Get
		Set
			If (String.Equals(Me._ODCode, value) = false) Then
				Me.OnODCodeChanging(value)
				Me.SendPropertyChanging
				Me._ODCode = value
				Me.SendPropertyChanged("ODCode")
				Me.OnODCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ODDecimal", DbType:="Decimal(18,3)")>  _
	Public Property ODDecimal() As System.Nullable(Of Decimal)
		Get
			Return Me._ODDecimal
		End Get
		Set
			If (Me._ODDecimal.Equals(value) = false) Then
				Me.OnODDecimalChanging(value)
				Me.SendPropertyChanging
				Me._ODDecimal = value
				Me.SendPropertyChanged("ODDecimal")
				Me.OnODDecimalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OD_Component", Storage:="_Components", ThisKey:="ODID", OtherKey:="OD_ID")>  _
	Public Property Components() As EntitySet(Of Component)
		Get
			Return Me._Components
		End Get
		Set
			Me._Components.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OD_CostUp", Storage:="_CostUps", ThisKey:="ODID", OtherKey:="OD_ID")>  _
	Public Property CostUps() As EntitySet(Of CostUp)
		Get
			Return Me._CostUps
		End Get
		Set
			Me._CostUps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.OD = Me
	End Sub
	
	Private Sub detach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.OD = Nothing
	End Sub
	
	Private Sub attach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.OD = Me
	End Sub
	
	Private Sub detach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.OD = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Component")>  _
Partial Public Class Component
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CompID As Long
	
	Private _CompCode As String
	
	Private _CompNum As String
	
	Private _CompDesc As String
	
	Private _CompCost As System.Nullable(Of Decimal)
	
	Private _UM_ID As System.Nullable(Of Long)
	
	Private _Catagory_ID As System.Nullable(Of Long)
	
	Private _Cal_ID As System.Nullable(Of Long)
	
	Private _WireCount_ID As System.Nullable(Of Long)
	
	Private _SingleDual_ID As System.Nullable(Of Long)
	
	Private _NPT_ID As System.Nullable(Of Long)
	
	Private _OD_ID As System.Nullable(Of Long)
	
	Private _Material_ID As System.Nullable(Of Long)
	
	Private _Markup As System.Nullable(Of Decimal)
	
	Private _MIType_ID As System.Nullable(Of Long)
	
	Private _Standard As System.Nullable(Of Boolean)
	
	Private _Resale As System.Nullable(Of Boolean)
	
	Private _LaborCost As System.Nullable(Of Decimal)
	
	Private _CostComponentKeys As EntitySet(Of CostComponentKey)
	
	Private _UM As EntityRef(Of UM)
	
	Private _OD As EntityRef(Of OD)
	
	Private _ComponentCatagory As EntityRef(Of ComponentCatagory)
	
	Private _SingleDual As EntityRef(Of SingleDual)
	
	Private _NPT As EntityRef(Of NPT)
	
	Private _Calibration As EntityRef(Of Calibration)
	
	Private _WireCount As EntityRef(Of WireCount)
	
	Private _Material As EntityRef(Of Material)
	
	Private _MIType As EntityRef(Of MIType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCompIDChanging(value As Long)
    End Sub
    Partial Private Sub OnCompIDChanged()
    End Sub
    Partial Private Sub OnCompCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCompCodeChanged()
    End Sub
    Partial Private Sub OnCompNumChanging(value As String)
    End Sub
    Partial Private Sub OnCompNumChanged()
    End Sub
    Partial Private Sub OnCompDescChanging(value As String)
    End Sub
    Partial Private Sub OnCompDescChanged()
    End Sub
    Partial Private Sub OnCompCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCompCostChanged()
    End Sub
    Partial Private Sub OnUM_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUM_IDChanged()
    End Sub
    Partial Private Sub OnCatagory_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCatagory_IDChanged()
    End Sub
    Partial Private Sub OnCal_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCal_IDChanged()
    End Sub
    Partial Private Sub OnWireCount_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnWireCount_IDChanged()
    End Sub
    Partial Private Sub OnSingleDual_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnSingleDual_IDChanged()
    End Sub
    Partial Private Sub OnNPT_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnNPT_IDChanged()
    End Sub
    Partial Private Sub OnOD_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnOD_IDChanged()
    End Sub
    Partial Private Sub OnMaterial_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMaterial_IDChanged()
    End Sub
    Partial Private Sub OnMarkupChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMarkupChanged()
    End Sub
    Partial Private Sub OnMIType_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMIType_IDChanged()
    End Sub
    Partial Private Sub OnStandardChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnStandardChanged()
    End Sub
    Partial Private Sub OnResaleChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnResaleChanged()
    End Sub
    Partial Private Sub OnLaborCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnLaborCostChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CostComponentKeys = New EntitySet(Of CostComponentKey)(AddressOf Me.attach_CostComponentKeys, AddressOf Me.detach_CostComponentKeys)
		Me._UM = CType(Nothing, EntityRef(Of UM))
		Me._OD = CType(Nothing, EntityRef(Of OD))
		Me._ComponentCatagory = CType(Nothing, EntityRef(Of ComponentCatagory))
		Me._SingleDual = CType(Nothing, EntityRef(Of SingleDual))
		Me._NPT = CType(Nothing, EntityRef(Of NPT))
		Me._Calibration = CType(Nothing, EntityRef(Of Calibration))
		Me._WireCount = CType(Nothing, EntityRef(Of WireCount))
		Me._Material = CType(Nothing, EntityRef(Of Material))
		Me._MIType = CType(Nothing, EntityRef(Of MIType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CompID() As Long
		Get
			Return Me._CompID
		End Get
		Set
			If ((Me._CompID = value)  _
						= false) Then
				Me.OnCompIDChanging(value)
				Me.SendPropertyChanging
				Me._CompID = value
				Me.SendPropertyChanged("CompID")
				Me.OnCompIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompCode", DbType:="Char(10)")>  _
	Public Property CompCode() As String
		Get
			Return Me._CompCode
		End Get
		Set
			If (String.Equals(Me._CompCode, value) = false) Then
				Me.OnCompCodeChanging(value)
				Me.SendPropertyChanging
				Me._CompCode = value
				Me.SendPropertyChanged("CompCode")
				Me.OnCompCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompNum", DbType:="NVarChar(50)")>  _
	Public Property CompNum() As String
		Get
			Return Me._CompNum
		End Get
		Set
			If (String.Equals(Me._CompNum, value) = false) Then
				Me.OnCompNumChanging(value)
				Me.SendPropertyChanging
				Me._CompNum = value
				Me.SendPropertyChanged("CompNum")
				Me.OnCompNumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompDesc", DbType:="NVarChar(MAX)")>  _
	Public Property CompDesc() As String
		Get
			Return Me._CompDesc
		End Get
		Set
			If (String.Equals(Me._CompDesc, value) = false) Then
				Me.OnCompDescChanging(value)
				Me.SendPropertyChanging
				Me._CompDesc = value
				Me.SendPropertyChanged("CompDesc")
				Me.OnCompDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompCost", DbType:="Money")>  _
	Public Property CompCost() As System.Nullable(Of Decimal)
		Get
			Return Me._CompCost
		End Get
		Set
			If (Me._CompCost.Equals(value) = false) Then
				Me.OnCompCostChanging(value)
				Me.SendPropertyChanging
				Me._CompCost = value
				Me.SendPropertyChanged("CompCost")
				Me.OnCompCostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UM_ID", DbType:="BigInt")>  _
	Public Property UM_ID() As System.Nullable(Of Long)
		Get
			Return Me._UM_ID
		End Get
		Set
			If (Me._UM_ID.Equals(value) = false) Then
				If Me._UM.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUM_IDChanging(value)
				Me.SendPropertyChanging
				Me._UM_ID = value
				Me.SendPropertyChanged("UM_ID")
				Me.OnUM_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Catagory_ID", DbType:="BigInt")>  _
	Public Property Catagory_ID() As System.Nullable(Of Long)
		Get
			Return Me._Catagory_ID
		End Get
		Set
			If (Me._Catagory_ID.Equals(value) = false) Then
				If Me._ComponentCatagory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCatagory_IDChanging(value)
				Me.SendPropertyChanging
				Me._Catagory_ID = value
				Me.SendPropertyChanged("Catagory_ID")
				Me.OnCatagory_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cal_ID", DbType:="BigInt")>  _
	Public Property Cal_ID() As System.Nullable(Of Long)
		Get
			Return Me._Cal_ID
		End Get
		Set
			If (Me._Cal_ID.Equals(value) = false) Then
				If Me._Calibration.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCal_IDChanging(value)
				Me.SendPropertyChanging
				Me._Cal_ID = value
				Me.SendPropertyChanged("Cal_ID")
				Me.OnCal_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WireCount_ID", DbType:="BigInt")>  _
	Public Property WireCount_ID() As System.Nullable(Of Long)
		Get
			Return Me._WireCount_ID
		End Get
		Set
			If (Me._WireCount_ID.Equals(value) = false) Then
				If Me._WireCount.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnWireCount_IDChanging(value)
				Me.SendPropertyChanging
				Me._WireCount_ID = value
				Me.SendPropertyChanged("WireCount_ID")
				Me.OnWireCount_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SingleDual_ID", DbType:="BigInt")>  _
	Public Property SingleDual_ID() As System.Nullable(Of Long)
		Get
			Return Me._SingleDual_ID
		End Get
		Set
			If (Me._SingleDual_ID.Equals(value) = false) Then
				If Me._SingleDual.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSingleDual_IDChanging(value)
				Me.SendPropertyChanging
				Me._SingleDual_ID = value
				Me.SendPropertyChanged("SingleDual_ID")
				Me.OnSingleDual_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NPT_ID", DbType:="BigInt")>  _
	Public Property NPT_ID() As System.Nullable(Of Long)
		Get
			Return Me._NPT_ID
		End Get
		Set
			If (Me._NPT_ID.Equals(value) = false) Then
				If Me._NPT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnNPT_IDChanging(value)
				Me.SendPropertyChanging
				Me._NPT_ID = value
				Me.SendPropertyChanged("NPT_ID")
				Me.OnNPT_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OD_ID", DbType:="BigInt")>  _
	Public Property OD_ID() As System.Nullable(Of Long)
		Get
			Return Me._OD_ID
		End Get
		Set
			If (Me._OD_ID.Equals(value) = false) Then
				If Me._OD.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOD_IDChanging(value)
				Me.SendPropertyChanging
				Me._OD_ID = value
				Me.SendPropertyChanged("OD_ID")
				Me.OnOD_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Material_ID", DbType:="BigInt")>  _
	Public Property Material_ID() As System.Nullable(Of Long)
		Get
			Return Me._Material_ID
		End Get
		Set
			If (Me._Material_ID.Equals(value) = false) Then
				If Me._Material.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaterial_IDChanging(value)
				Me.SendPropertyChanging
				Me._Material_ID = value
				Me.SendPropertyChanged("Material_ID")
				Me.OnMaterial_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Markup", DbType:="Decimal(18,3)")>  _
	Public Property Markup() As System.Nullable(Of Decimal)
		Get
			Return Me._Markup
		End Get
		Set
			If (Me._Markup.Equals(value) = false) Then
				Me.OnMarkupChanging(value)
				Me.SendPropertyChanging
				Me._Markup = value
				Me.SendPropertyChanged("Markup")
				Me.OnMarkupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MIType_ID", DbType:="BigInt")>  _
	Public Property MIType_ID() As System.Nullable(Of Long)
		Get
			Return Me._MIType_ID
		End Get
		Set
			If (Me._MIType_ID.Equals(value) = false) Then
				If Me._MIType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMIType_IDChanging(value)
				Me.SendPropertyChanging
				Me._MIType_ID = value
				Me.SendPropertyChanged("MIType_ID")
				Me.OnMIType_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Standard", DbType:="Bit")>  _
	Public Property Standard() As System.Nullable(Of Boolean)
		Get
			Return Me._Standard
		End Get
		Set
			If (Me._Standard.Equals(value) = false) Then
				Me.OnStandardChanging(value)
				Me.SendPropertyChanging
				Me._Standard = value
				Me.SendPropertyChanged("Standard")
				Me.OnStandardChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Resale", DbType:="Bit")>  _
	Public Property Resale() As System.Nullable(Of Boolean)
		Get
			Return Me._Resale
		End Get
		Set
			If (Me._Resale.Equals(value) = false) Then
				Me.OnResaleChanging(value)
				Me.SendPropertyChanging
				Me._Resale = value
				Me.SendPropertyChanged("Resale")
				Me.OnResaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LaborCost", DbType:="Decimal(18,3)")>  _
	Public Property LaborCost() As System.Nullable(Of Decimal)
		Get
			Return Me._LaborCost
		End Get
		Set
			If (Me._LaborCost.Equals(value) = false) Then
				Me.OnLaborCostChanging(value)
				Me.SendPropertyChanging
				Me._LaborCost = value
				Me.SendPropertyChanged("LaborCost")
				Me.OnLaborCostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Component_CostComponentKey", Storage:="_CostComponentKeys", ThisKey:="CompID", OtherKey:="Comp_ID")>  _
	Public Property CostComponentKeys() As EntitySet(Of CostComponentKey)
		Get
			Return Me._CostComponentKeys
		End Get
		Set
			Me._CostComponentKeys.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UM_Component", Storage:="_UM", ThisKey:="UM_ID", OtherKey:="UMID", IsForeignKey:=true)>  _
	Public Property UM() As UM
		Get
			Return Me._UM.Entity
		End Get
		Set
			Dim previousValue As UM = Me._UM.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UM.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UM.Entity = Nothing
					previousValue.Components.Remove(Me)
				End If
				Me._UM.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Components.Add(Me)
					Me._UM_ID = value.UMID
				Else
					Me._UM_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("UM")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OD_Component", Storage:="_OD", ThisKey:="OD_ID", OtherKey:="ODID", IsForeignKey:=true)>  _
	Public Property OD() As OD
		Get
			Return Me._OD.Entity
		End Get
		Set
			Dim previousValue As OD = Me._OD.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OD.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OD.Entity = Nothing
					previousValue.Components.Remove(Me)
				End If
				Me._OD.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Components.Add(Me)
					Me._OD_ID = value.ODID
				Else
					Me._OD_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("OD")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ComponentCatagory_Component", Storage:="_ComponentCatagory", ThisKey:="Catagory_ID", OtherKey:="CatagoryID", IsForeignKey:=true)>  _
	Public Property ComponentCatagory() As ComponentCatagory
		Get
			Return Me._ComponentCatagory.Entity
		End Get
		Set
			Dim previousValue As ComponentCatagory = Me._ComponentCatagory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ComponentCatagory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ComponentCatagory.Entity = Nothing
					previousValue.Components.Remove(Me)
				End If
				Me._ComponentCatagory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Components.Add(Me)
					Me._Catagory_ID = value.CatagoryID
				Else
					Me._Catagory_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("ComponentCatagory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SingleDual_Component", Storage:="_SingleDual", ThisKey:="SingleDual_ID", OtherKey:="SingleDualID", IsForeignKey:=true)>  _
	Public Property SingleDual() As SingleDual
		Get
			Return Me._SingleDual.Entity
		End Get
		Set
			Dim previousValue As SingleDual = Me._SingleDual.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SingleDual.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SingleDual.Entity = Nothing
					previousValue.Components.Remove(Me)
				End If
				Me._SingleDual.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Components.Add(Me)
					Me._SingleDual_ID = value.SingleDualID
				Else
					Me._SingleDual_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("SingleDual")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="NPT_Component", Storage:="_NPT", ThisKey:="NPT_ID", OtherKey:="NPTID", IsForeignKey:=true)>  _
	Public Property NPT() As NPT
		Get
			Return Me._NPT.Entity
		End Get
		Set
			Dim previousValue As NPT = Me._NPT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._NPT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._NPT.Entity = Nothing
					previousValue.Components.Remove(Me)
				End If
				Me._NPT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Components.Add(Me)
					Me._NPT_ID = value.NPTID
				Else
					Me._NPT_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("NPT")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Calibration_Component", Storage:="_Calibration", ThisKey:="Cal_ID", OtherKey:="CalID", IsForeignKey:=true)>  _
	Public Property Calibration() As Calibration
		Get
			Return Me._Calibration.Entity
		End Get
		Set
			Dim previousValue As Calibration = Me._Calibration.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Calibration.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Calibration.Entity = Nothing
					previousValue.Components.Remove(Me)
				End If
				Me._Calibration.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Components.Add(Me)
					Me._Cal_ID = value.CalID
				Else
					Me._Cal_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Calibration")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="WireCount_Component", Storage:="_WireCount", ThisKey:="WireCount_ID", OtherKey:="WireCountID", IsForeignKey:=true)>  _
	Public Property WireCount() As WireCount
		Get
			Return Me._WireCount.Entity
		End Get
		Set
			Dim previousValue As WireCount = Me._WireCount.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._WireCount.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._WireCount.Entity = Nothing
					previousValue.Components.Remove(Me)
				End If
				Me._WireCount.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Components.Add(Me)
					Me._WireCount_ID = value.WireCountID
				Else
					Me._WireCount_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("WireCount")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Material_Component", Storage:="_Material", ThisKey:="Material_ID", OtherKey:="MaterialID", IsForeignKey:=true)>  _
	Public Property Material() As Material
		Get
			Return Me._Material.Entity
		End Get
		Set
			Dim previousValue As Material = Me._Material.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Material.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Material.Entity = Nothing
					previousValue.Components.Remove(Me)
				End If
				Me._Material.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Components.Add(Me)
					Me._Material_ID = value.MaterialID
				Else
					Me._Material_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Material")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MIType_Component", Storage:="_MIType", ThisKey:="MIType_ID", OtherKey:="MITypeID", IsForeignKey:=true)>  _
	Public Property MIType() As MIType
		Get
			Return Me._MIType.Entity
		End Get
		Set
			Dim previousValue As MIType = Me._MIType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MIType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MIType.Entity = Nothing
					previousValue.Components.Remove(Me)
				End If
				Me._MIType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Components.Add(Me)
					Me._MIType_ID = value.MITypeID
				Else
					Me._MIType_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("MIType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CostComponentKeys(ByVal entity As CostComponentKey)
		Me.SendPropertyChanging
		entity.Component = Me
	End Sub
	
	Private Sub detach_CostComponentKeys(ByVal entity As CostComponentKey)
		Me.SendPropertyChanging
		entity.Component = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SensorType")>  _
Partial Public Class SensorType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TypeID As Long
	
	Private _TypeCode As String
	
	Private _TypeDesc As String
	
	Private _Labor As System.Nullable(Of Decimal)
	
	Private _CostUps As EntitySet(Of CostUp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTypeIDChanging(value As Long)
    End Sub
    Partial Private Sub OnTypeIDChanged()
    End Sub
    Partial Private Sub OnTypeCodeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeCodeChanged()
    End Sub
    Partial Private Sub OnTypeDescChanging(value As String)
    End Sub
    Partial Private Sub OnTypeDescChanged()
    End Sub
    Partial Private Sub OnLaborChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnLaborChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CostUps = New EntitySet(Of CostUp)(AddressOf Me.attach_CostUps, AddressOf Me.detach_CostUps)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TypeID() As Long
		Get
			Return Me._TypeID
		End Get
		Set
			If ((Me._TypeID = value)  _
						= false) Then
				Me.OnTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._TypeID = value
				Me.SendPropertyChanged("TypeID")
				Me.OnTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeCode", DbType:="NVarChar(50)")>  _
	Public Property TypeCode() As String
		Get
			Return Me._TypeCode
		End Get
		Set
			If (String.Equals(Me._TypeCode, value) = false) Then
				Me.OnTypeCodeChanging(value)
				Me.SendPropertyChanging
				Me._TypeCode = value
				Me.SendPropertyChanged("TypeCode")
				Me.OnTypeCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeDesc", DbType:="NVarChar(50)")>  _
	Public Property TypeDesc() As String
		Get
			Return Me._TypeDesc
		End Get
		Set
			If (String.Equals(Me._TypeDesc, value) = false) Then
				Me.OnTypeDescChanging(value)
				Me.SendPropertyChanging
				Me._TypeDesc = value
				Me.SendPropertyChanged("TypeDesc")
				Me.OnTypeDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Labor", DbType:="Money")>  _
	Public Property Labor() As System.Nullable(Of Decimal)
		Get
			Return Me._Labor
		End Get
		Set
			If (Me._Labor.Equals(value) = false) Then
				Me.OnLaborChanging(value)
				Me.SendPropertyChanging
				Me._Labor = value
				Me.SendPropertyChanged("Labor")
				Me.OnLaborChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SensorType_CostUp", Storage:="_CostUps", ThisKey:="TypeID", OtherKey:="SensorType_ID")>  _
	Public Property CostUps() As EntitySet(Of CostUp)
		Get
			Return Me._CostUps
		End Get
		Set
			Me._CostUps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.SensorType = Me
	End Sub
	
	Private Sub detach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.SensorType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CostComponentKey")>  _
Partial Public Class CostComponentKey
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CCID As Long
	
	Private _CostUp_ID As System.Nullable(Of Long)
	
	Private _Comp_ID As System.Nullable(Of Long)
	
	Private _Quantity As System.Nullable(Of Decimal)
	
	Private _Component As EntityRef(Of Component)
	
	Private _CostUp As EntityRef(Of CostUp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCCIDChanging(value As Long)
    End Sub
    Partial Private Sub OnCCIDChanged()
    End Sub
    Partial Private Sub OnCostUp_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCostUp_IDChanged()
    End Sub
    Partial Private Sub OnComp_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnComp_IDChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Component = CType(Nothing, EntityRef(Of Component))
		Me._CostUp = CType(Nothing, EntityRef(Of CostUp))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CCID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CCID() As Long
		Get
			Return Me._CCID
		End Get
		Set
			If ((Me._CCID = value)  _
						= false) Then
				Me.OnCCIDChanging(value)
				Me.SendPropertyChanging
				Me._CCID = value
				Me.SendPropertyChanged("CCID")
				Me.OnCCIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostUp_ID", DbType:="BigInt")>  _
	Public Property CostUp_ID() As System.Nullable(Of Long)
		Get
			Return Me._CostUp_ID
		End Get
		Set
			If (Me._CostUp_ID.Equals(value) = false) Then
				If Me._CostUp.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCostUp_IDChanging(value)
				Me.SendPropertyChanging
				Me._CostUp_ID = value
				Me.SendPropertyChanged("CostUp_ID")
				Me.OnCostUp_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comp_ID", DbType:="BigInt")>  _
	Public Property Comp_ID() As System.Nullable(Of Long)
		Get
			Return Me._Comp_ID
		End Get
		Set
			If (Me._Comp_ID.Equals(value) = false) Then
				If Me._Component.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnComp_IDChanging(value)
				Me.SendPropertyChanging
				Me._Comp_ID = value
				Me.SendPropertyChanged("Comp_ID")
				Me.OnComp_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="Decimal(18,3)")>  _
	Public Property Quantity() As System.Nullable(Of Decimal)
		Get
			Return Me._Quantity
		End Get
		Set
			If (Me._Quantity.Equals(value) = false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Component_CostComponentKey", Storage:="_Component", ThisKey:="Comp_ID", OtherKey:="CompID", IsForeignKey:=true)>  _
	Public Property Component() As Component
		Get
			Return Me._Component.Entity
		End Get
		Set
			Dim previousValue As Component = Me._Component.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Component.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Component.Entity = Nothing
					previousValue.CostComponentKeys.Remove(Me)
				End If
				Me._Component.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CostComponentKeys.Add(Me)
					Me._Comp_ID = value.CompID
				Else
					Me._Comp_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Component")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CostUp_CostComponentKey", Storage:="_CostUp", ThisKey:="CostUp_ID", OtherKey:="CostUpID", IsForeignKey:=true)>  _
	Public Property CostUp() As CostUp
		Get
			Return Me._CostUp.Entity
		End Get
		Set
			Dim previousValue As CostUp = Me._CostUp.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CostUp.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CostUp.Entity = Nothing
					previousValue.CostComponentKeys.Remove(Me)
				End If
				Me._CostUp.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CostComponentKeys.Add(Me)
					Me._CostUp_ID = value.CostUpID
				Else
					Me._CostUp_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("CostUp")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CostType")>  _
Partial Public Class CostType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CostTypeID As Long
	
	Private _CostTypeDesc As String
	
	Private _CostUps As EntitySet(Of CostUp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCostTypeIDChanging(value As Long)
    End Sub
    Partial Private Sub OnCostTypeIDChanged()
    End Sub
    Partial Private Sub OnCostTypeDescChanging(value As String)
    End Sub
    Partial Private Sub OnCostTypeDescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CostUps = New EntitySet(Of CostUp)(AddressOf Me.attach_CostUps, AddressOf Me.detach_CostUps)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostTypeID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CostTypeID() As Long
		Get
			Return Me._CostTypeID
		End Get
		Set
			If ((Me._CostTypeID = value)  _
						= false) Then
				Me.OnCostTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._CostTypeID = value
				Me.SendPropertyChanged("CostTypeID")
				Me.OnCostTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostTypeDesc", DbType:="VarChar(MAX)")>  _
	Public Property CostTypeDesc() As String
		Get
			Return Me._CostTypeDesc
		End Get
		Set
			If (String.Equals(Me._CostTypeDesc, value) = false) Then
				Me.OnCostTypeDescChanging(value)
				Me.SendPropertyChanging
				Me._CostTypeDesc = value
				Me.SendPropertyChanged("CostTypeDesc")
				Me.OnCostTypeDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CostType_CostUp", Storage:="_CostUps", ThisKey:="CostTypeID", OtherKey:="CostType_ID")>  _
	Public Property CostUps() As EntitySet(Of CostUp)
		Get
			Return Me._CostUps
		End Get
		Set
			Me._CostUps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.CostType = Me
	End Sub
	
	Private Sub detach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.CostType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WireCount")>  _
Partial Public Class WireCount
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _WireCountID As Long
	
	Private _WireDesc As String
	
	Private _WireCount As System.Nullable(Of Long)
	
	Private _Components As EntitySet(Of Component)
	
	Private _CostUps As EntitySet(Of CostUp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWireCountIDChanging(value As Long)
    End Sub
    Partial Private Sub OnWireCountIDChanged()
    End Sub
    Partial Private Sub OnWireDescChanging(value As String)
    End Sub
    Partial Private Sub OnWireDescChanged()
    End Sub
    Partial Private Sub OnWireCountChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnWireCountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Components = New EntitySet(Of Component)(AddressOf Me.attach_Components, AddressOf Me.detach_Components)
		Me._CostUps = New EntitySet(Of CostUp)(AddressOf Me.attach_CostUps, AddressOf Me.detach_CostUps)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WireCountID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property WireCountID() As Long
		Get
			Return Me._WireCountID
		End Get
		Set
			If ((Me._WireCountID = value)  _
						= false) Then
				Me.OnWireCountIDChanging(value)
				Me.SendPropertyChanging
				Me._WireCountID = value
				Me.SendPropertyChanged("WireCountID")
				Me.OnWireCountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WireDesc", DbType:="NVarChar(50)")>  _
	Public Property WireDesc() As String
		Get
			Return Me._WireDesc
		End Get
		Set
			If (String.Equals(Me._WireDesc, value) = false) Then
				Me.OnWireDescChanging(value)
				Me.SendPropertyChanging
				Me._WireDesc = value
				Me.SendPropertyChanged("WireDesc")
				Me.OnWireDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WireCount", DbType:="BigInt")>  _
	Public Property WireCount() As System.Nullable(Of Long)
		Get
			Return Me._WireCount
		End Get
		Set
			If (Me._WireCount.Equals(value) = false) Then
				Me.OnWireCountChanging(value)
				Me.SendPropertyChanging
				Me._WireCount = value
				Me.SendPropertyChanged("WireCount")
				Me.OnWireCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="WireCount_Component", Storage:="_Components", ThisKey:="WireCountID", OtherKey:="WireCount_ID")>  _
	Public Property Components() As EntitySet(Of Component)
		Get
			Return Me._Components
		End Get
		Set
			Me._Components.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="WireCount_CostUp", Storage:="_CostUps", ThisKey:="WireCountID", OtherKey:="WireCount_ID")>  _
	Public Property CostUps() As EntitySet(Of CostUp)
		Get
			Return Me._CostUps
		End Get
		Set
			Me._CostUps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.WireCount = Me
	End Sub
	
	Private Sub detach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.WireCount = Nothing
	End Sub
	
	Private Sub attach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.WireCount = Me
	End Sub
	
	Private Sub detach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.WireCount = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Material")>  _
Partial Public Class Material
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaterialID As Long
	
	Private _MaterialDesc As String
	
	Private _MaterialCode As String
	
	Private _Components As EntitySet(Of Component)
	
	Private _CostUps As EntitySet(Of CostUp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaterialIDChanging(value As Long)
    End Sub
    Partial Private Sub OnMaterialIDChanged()
    End Sub
    Partial Private Sub OnMaterialDescChanging(value As String)
    End Sub
    Partial Private Sub OnMaterialDescChanged()
    End Sub
    Partial Private Sub OnMaterialCodeChanging(value As String)
    End Sub
    Partial Private Sub OnMaterialCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Components = New EntitySet(Of Component)(AddressOf Me.attach_Components, AddressOf Me.detach_Components)
		Me._CostUps = New EntitySet(Of CostUp)(AddressOf Me.attach_CostUps, AddressOf Me.detach_CostUps)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaterialID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property MaterialID() As Long
		Get
			Return Me._MaterialID
		End Get
		Set
			If ((Me._MaterialID = value)  _
						= false) Then
				Me.OnMaterialIDChanging(value)
				Me.SendPropertyChanging
				Me._MaterialID = value
				Me.SendPropertyChanged("MaterialID")
				Me.OnMaterialIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaterialDesc", DbType:="VarChar(50)")>  _
	Public Property MaterialDesc() As String
		Get
			Return Me._MaterialDesc
		End Get
		Set
			If (String.Equals(Me._MaterialDesc, value) = false) Then
				Me.OnMaterialDescChanging(value)
				Me.SendPropertyChanging
				Me._MaterialDesc = value
				Me.SendPropertyChanged("MaterialDesc")
				Me.OnMaterialDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaterialCode", DbType:="VarChar(50)")>  _
	Public Property MaterialCode() As String
		Get
			Return Me._MaterialCode
		End Get
		Set
			If (String.Equals(Me._MaterialCode, value) = false) Then
				Me.OnMaterialCodeChanging(value)
				Me.SendPropertyChanging
				Me._MaterialCode = value
				Me.SendPropertyChanged("MaterialCode")
				Me.OnMaterialCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Material_Component", Storage:="_Components", ThisKey:="MaterialID", OtherKey:="Material_ID")>  _
	Public Property Components() As EntitySet(Of Component)
		Get
			Return Me._Components
		End Get
		Set
			Me._Components.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Material_CostUp", Storage:="_CostUps", ThisKey:="MaterialID", OtherKey:="TWExtMat_ID")>  _
	Public Property CostUps() As EntitySet(Of CostUp)
		Get
			Return Me._CostUps
		End Get
		Set
			Me._CostUps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.Material = Me
	End Sub
	
	Private Sub detach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.Material = Nothing
	End Sub
	
	Private Sub attach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.Material = Me
	End Sub
	
	Private Sub detach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.Material = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MIType")>  _
Partial Public Class MIType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MITypeID As Long
	
	Private _MITypeCode As System.Nullable(Of Integer)
	
	Private _MyTypeDesc As String
	
	Private _Components As EntitySet(Of Component)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMITypeIDChanging(value As Long)
    End Sub
    Partial Private Sub OnMITypeIDChanged()
    End Sub
    Partial Private Sub OnMITypeCodeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMITypeCodeChanged()
    End Sub
    Partial Private Sub OnMITypeDescChanging(value As String)
    End Sub
    Partial Private Sub OnMITypeDescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Components = New EntitySet(Of Component)(AddressOf Me.attach_Components, AddressOf Me.detach_Components)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MITypeID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property MITypeID() As Long
		Get
			Return Me._MITypeID
		End Get
		Set
			If ((Me._MITypeID = value)  _
						= false) Then
				Me.OnMITypeIDChanging(value)
				Me.SendPropertyChanging
				Me._MITypeID = value
				Me.SendPropertyChanged("MITypeID")
				Me.OnMITypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MITypeCode", DbType:="Int")>  _
	Public Property MITypeCode() As System.Nullable(Of Integer)
		Get
			Return Me._MITypeCode
		End Get
		Set
			If (Me._MITypeCode.Equals(value) = false) Then
				Me.OnMITypeCodeChanging(value)
				Me.SendPropertyChanging
				Me._MITypeCode = value
				Me.SendPropertyChanged("MITypeCode")
				Me.OnMITypeCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MyTypeDesc", DbType:="VarChar(MAX)")>  _
	Public Property MITypeDesc() As String
		Get
			Return Me._MyTypeDesc
		End Get
		Set
			If (String.Equals(Me._MyTypeDesc, value) = false) Then
				Me.OnMITypeDescChanging(value)
				Me.SendPropertyChanging
				Me._MyTypeDesc = value
				Me.SendPropertyChanged("MITypeDesc")
				Me.OnMITypeDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MIType_Component", Storage:="_Components", ThisKey:="MITypeID", OtherKey:="MIType_ID")>  _
	Public Property Components() As EntitySet(Of Component)
		Get
			Return Me._Components
		End Get
		Set
			Me._Components.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.MIType = Me
	End Sub
	
	Private Sub detach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.MIType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CIPCatagory")>  _
Partial Public Class CIPCatagory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CIPID As Long
	
	Private _CIPCode As String
	
	Private _CIPDesc As String
	
	Private _CostUps As EntitySet(Of CostUp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCIPIDChanging(value As Long)
    End Sub
    Partial Private Sub OnCIPIDChanged()
    End Sub
    Partial Private Sub OnCIPCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCIPCodeChanged()
    End Sub
    Partial Private Sub OnCIPDescChanging(value As String)
    End Sub
    Partial Private Sub OnCIPDescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CostUps = New EntitySet(Of CostUp)(AddressOf Me.attach_CostUps, AddressOf Me.detach_CostUps)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIPID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CIPID() As Long
		Get
			Return Me._CIPID
		End Get
		Set
			If ((Me._CIPID = value)  _
						= false) Then
				Me.OnCIPIDChanging(value)
				Me.SendPropertyChanging
				Me._CIPID = value
				Me.SendPropertyChanged("CIPID")
				Me.OnCIPIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIPCode", DbType:="VarChar(50)")>  _
	Public Property CIPCode() As String
		Get
			Return Me._CIPCode
		End Get
		Set
			If (String.Equals(Me._CIPCode, value) = false) Then
				Me.OnCIPCodeChanging(value)
				Me.SendPropertyChanging
				Me._CIPCode = value
				Me.SendPropertyChanged("CIPCode")
				Me.OnCIPCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIPDesc", DbType:="VarChar(50)")>  _
	Public Property CIPDesc() As String
		Get
			Return Me._CIPDesc
		End Get
		Set
			If (String.Equals(Me._CIPDesc, value) = false) Then
				Me.OnCIPDescChanging(value)
				Me.SendPropertyChanging
				Me._CIPDesc = value
				Me.SendPropertyChanged("CIPDesc")
				Me.OnCIPDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CIPCatagory_CostUp", Storage:="_CostUps", ThisKey:="CIPID", OtherKey:="CIP_ID")>  _
	Public Property CostUps() As EntitySet(Of CostUp)
		Get
			Return Me._CostUps
		End Get
		Set
			Me._CostUps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.CIPCatagory = Me
	End Sub
	
	Private Sub detach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.CIPCatagory = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.IPCatagory")>  _
Partial Public Class IPCatagory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IPID As Long
	
	Private _IPCode As String
	
	Private _IPDesc As String
	
	Private _CostUps As EntitySet(Of CostUp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIPIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIPIDChanged()
    End Sub
    Partial Private Sub OnIPCodeChanging(value As String)
    End Sub
    Partial Private Sub OnIPCodeChanged()
    End Sub
    Partial Private Sub OnIPDescChanging(value As String)
    End Sub
    Partial Private Sub OnIPDescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CostUps = New EntitySet(Of CostUp)(AddressOf Me.attach_CostUps, AddressOf Me.detach_CostUps)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IPID() As Long
		Get
			Return Me._IPID
		End Get
		Set
			If ((Me._IPID = value)  _
						= false) Then
				Me.OnIPIDChanging(value)
				Me.SendPropertyChanging
				Me._IPID = value
				Me.SendPropertyChanged("IPID")
				Me.OnIPIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPCode", DbType:="VarChar(50)")>  _
	Public Property IPCode() As String
		Get
			Return Me._IPCode
		End Get
		Set
			If (String.Equals(Me._IPCode, value) = false) Then
				Me.OnIPCodeChanging(value)
				Me.SendPropertyChanging
				Me._IPCode = value
				Me.SendPropertyChanged("IPCode")
				Me.OnIPCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPDesc", DbType:="VarChar(50)")>  _
	Public Property IPDesc() As String
		Get
			Return Me._IPDesc
		End Get
		Set
			If (String.Equals(Me._IPDesc, value) = false) Then
				Me.OnIPDescChanging(value)
				Me.SendPropertyChanging
				Me._IPDesc = value
				Me.SendPropertyChanged("IPDesc")
				Me.OnIPDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IPCatagory_CostUp", Storage:="_CostUps", ThisKey:="IPID", OtherKey:="IP_ID")>  _
	Public Property CostUps() As EntitySet(Of CostUp)
		Get
			Return Me._CostUps
		End Get
		Set
			Me._CostUps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.IPCatagory = Me
	End Sub
	
	Private Sub detach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.IPCatagory = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.IPType")>  _
Partial Public Class IPType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IPTypeID As Long
	
	Private _IPTypeCode As String
	
	Private _IPTypeDesc As String
	
	Private _CostUps As EntitySet(Of CostUp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIPTypeIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIPTypeIDChanged()
    End Sub
    Partial Private Sub OnIPTypeCodeChanging(value As String)
    End Sub
    Partial Private Sub OnIPTypeCodeChanged()
    End Sub
    Partial Private Sub OnIPTypeDescChanging(value As String)
    End Sub
    Partial Private Sub OnIPTypeDescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CostUps = New EntitySet(Of CostUp)(AddressOf Me.attach_CostUps, AddressOf Me.detach_CostUps)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPTypeID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IPTypeID() As Long
		Get
			Return Me._IPTypeID
		End Get
		Set
			If ((Me._IPTypeID = value)  _
						= false) Then
				Me.OnIPTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._IPTypeID = value
				Me.SendPropertyChanged("IPTypeID")
				Me.OnIPTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPTypeCode", DbType:="VarChar(50)")>  _
	Public Property IPTypeCode() As String
		Get
			Return Me._IPTypeCode
		End Get
		Set
			If (String.Equals(Me._IPTypeCode, value) = false) Then
				Me.OnIPTypeCodeChanging(value)
				Me.SendPropertyChanging
				Me._IPTypeCode = value
				Me.SendPropertyChanged("IPTypeCode")
				Me.OnIPTypeCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPTypeDesc", DbType:="VarChar(50)")>  _
	Public Property IPTypeDesc() As String
		Get
			Return Me._IPTypeDesc
		End Get
		Set
			If (String.Equals(Me._IPTypeDesc, value) = false) Then
				Me.OnIPTypeDescChanging(value)
				Me.SendPropertyChanging
				Me._IPTypeDesc = value
				Me.SendPropertyChanged("IPTypeDesc")
				Me.OnIPTypeDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IPType_CostUp", Storage:="_CostUps", ThisKey:="IPTypeID", OtherKey:="IPType_ID")>  _
	Public Property CostUps() As EntitySet(Of CostUp)
		Get
			Return Me._CostUps
		End Get
		Set
			Me._CostUps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.IPType = Me
	End Sub
	
	Private Sub detach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.IPType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TWConfiguration")>  _
Partial Public Class TWConfiguration
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TWConfigID As Long
	
	Private _TWConfigDesc As String
	
	Private _TWConfigCode As String
	
	Private _CostUps As EntitySet(Of CostUp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTWConfigIDChanging(value As Long)
    End Sub
    Partial Private Sub OnTWConfigIDChanged()
    End Sub
    Partial Private Sub OnTWConfigDescChanging(value As String)
    End Sub
    Partial Private Sub OnTWConfigDescChanged()
    End Sub
    Partial Private Sub OnTWConfigCodeChanging(value As String)
    End Sub
    Partial Private Sub OnTWConfigCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CostUps = New EntitySet(Of CostUp)(AddressOf Me.attach_CostUps, AddressOf Me.detach_CostUps)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TWConfigID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TWConfigID() As Long
		Get
			Return Me._TWConfigID
		End Get
		Set
			If ((Me._TWConfigID = value)  _
						= false) Then
				Me.OnTWConfigIDChanging(value)
				Me.SendPropertyChanging
				Me._TWConfigID = value
				Me.SendPropertyChanged("TWConfigID")
				Me.OnTWConfigIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TWConfigDesc", DbType:="VarChar(50)")>  _
	Public Property TWConfigDesc() As String
		Get
			Return Me._TWConfigDesc
		End Get
		Set
			If (String.Equals(Me._TWConfigDesc, value) = false) Then
				Me.OnTWConfigDescChanging(value)
				Me.SendPropertyChanging
				Me._TWConfigDesc = value
				Me.SendPropertyChanged("TWConfigDesc")
				Me.OnTWConfigDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TWConfigCode", DbType:="VarChar(50)")>  _
	Public Property TWConfigCode() As String
		Get
			Return Me._TWConfigCode
		End Get
		Set
			If (String.Equals(Me._TWConfigCode, value) = false) Then
				Me.OnTWConfigCodeChanging(value)
				Me.SendPropertyChanging
				Me._TWConfigCode = value
				Me.SendPropertyChanged("TWConfigCode")
				Me.OnTWConfigCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TWConfiguration_CostUp", Storage:="_CostUps", ThisKey:="TWConfigID", OtherKey:="TWConfig_ID")>  _
	Public Property CostUps() As EntitySet(Of CostUp)
		Get
			Return Me._CostUps
		End Get
		Set
			Me._CostUps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.TWConfiguration = Me
	End Sub
	
	Private Sub detach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.TWConfiguration = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TWExtLength")>  _
Partial Public Class TWExtLength
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TWExtLengthID As Long
	
	Private _TWExtLengthCode As String
	
	Private _TWExtLengthDesc As String
	
	Private _CostUps As EntitySet(Of CostUp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTWExtLengthIDChanging(value As Long)
    End Sub
    Partial Private Sub OnTWExtLengthIDChanged()
    End Sub
    Partial Private Sub OnTWExtLengthCodeChanging(value As String)
    End Sub
    Partial Private Sub OnTWExtLengthCodeChanged()
    End Sub
    Partial Private Sub OnTWExtLengthDescChanging(value As String)
    End Sub
    Partial Private Sub OnTWExtLengthDescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CostUps = New EntitySet(Of CostUp)(AddressOf Me.attach_CostUps, AddressOf Me.detach_CostUps)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TWExtLengthID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TWExtLengthID() As Long
		Get
			Return Me._TWExtLengthID
		End Get
		Set
			If ((Me._TWExtLengthID = value)  _
						= false) Then
				Me.OnTWExtLengthIDChanging(value)
				Me.SendPropertyChanging
				Me._TWExtLengthID = value
				Me.SendPropertyChanged("TWExtLengthID")
				Me.OnTWExtLengthIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TWExtLengthCode", DbType:="VarChar(50)")>  _
	Public Property TWExtLengthCode() As String
		Get
			Return Me._TWExtLengthCode
		End Get
		Set
			If (String.Equals(Me._TWExtLengthCode, value) = false) Then
				Me.OnTWExtLengthCodeChanging(value)
				Me.SendPropertyChanging
				Me._TWExtLengthCode = value
				Me.SendPropertyChanged("TWExtLengthCode")
				Me.OnTWExtLengthCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TWExtLengthDesc", DbType:="VarChar(50)")>  _
	Public Property TWExtLengthDesc() As String
		Get
			Return Me._TWExtLengthDesc
		End Get
		Set
			If (String.Equals(Me._TWExtLengthDesc, value) = false) Then
				Me.OnTWExtLengthDescChanging(value)
				Me.SendPropertyChanging
				Me._TWExtLengthDesc = value
				Me.SendPropertyChanged("TWExtLengthDesc")
				Me.OnTWExtLengthDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TWExtLength_CostUp", Storage:="_CostUps", ThisKey:="TWExtLengthID", OtherKey:="TWExtLength_ID")>  _
	Public Property CostUps() As EntitySet(Of CostUp)
		Get
			Return Me._CostUps
		End Get
		Set
			Me._CostUps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.TWExtLength = Me
	End Sub
	
	Private Sub detach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.TWExtLength = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Company")>  _
Partial Public Class Company
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CompanyID As Long
	
	Private _CompanyName As String
	
	Private _Discount_ID As System.Nullable(Of Long)
	
	Private _Customers As EntitySet(Of Customer)
	
	Private _Discount As EntityRef(Of Discount)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCompanyIDChanging(value As Long)
    End Sub
    Partial Private Sub OnCompanyIDChanged()
    End Sub
    Partial Private Sub OnCompanyNameChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyNameChanged()
    End Sub
    Partial Private Sub OnDiscount_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnDiscount_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Customers = New EntitySet(Of Customer)(AddressOf Me.attach_Customers, AddressOf Me.detach_Customers)
		Me._Discount = CType(Nothing, EntityRef(Of Discount))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CompanyID() As Long
		Get
			Return Me._CompanyID
		End Get
		Set
			If ((Me._CompanyID = value)  _
						= false) Then
				Me.OnCompanyIDChanging(value)
				Me.SendPropertyChanging
				Me._CompanyID = value
				Me.SendPropertyChanged("CompanyID")
				Me.OnCompanyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="VarChar(50)")>  _
	Public Property CompanyName() As String
		Get
			Return Me._CompanyName
		End Get
		Set
			If (String.Equals(Me._CompanyName, value) = false) Then
				Me.OnCompanyNameChanging(value)
				Me.SendPropertyChanging
				Me._CompanyName = value
				Me.SendPropertyChanged("CompanyName")
				Me.OnCompanyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discount_ID", DbType:="BigInt")>  _
	Public Property Discount_ID() As System.Nullable(Of Long)
		Get
			Return Me._Discount_ID
		End Get
		Set
			If (Me._Discount_ID.Equals(value) = false) Then
				If Me._Discount.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDiscount_IDChanging(value)
				Me.SendPropertyChanging
				Me._Discount_ID = value
				Me.SendPropertyChanged("Discount_ID")
				Me.OnDiscount_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Company_Customer", Storage:="_Customers", ThisKey:="CompanyID", OtherKey:="Company_ID")>  _
	Public Property Customers() As EntitySet(Of Customer)
		Get
			Return Me._Customers
		End Get
		Set
			Me._Customers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Discount_Company", Storage:="_Discount", ThisKey:="Discount_ID", OtherKey:="DiscountID", IsForeignKey:=true)>  _
	Public Property Discount() As Discount
		Get
			Return Me._Discount.Entity
		End Get
		Set
			Dim previousValue As Discount = Me._Discount.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Discount.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Discount.Entity = Nothing
					previousValue.Companies.Remove(Me)
				End If
				Me._Discount.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Companies.Add(Me)
					Me._Discount_ID = value.DiscountID
				Else
					Me._Discount_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Discount")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Customers(ByVal entity As Customer)
		Me.SendPropertyChanging
		entity.Company = Me
	End Sub
	
	Private Sub detach_Customers(ByVal entity As Customer)
		Me.SendPropertyChanging
		entity.Company = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customer")>  _
Partial Public Class Customer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CustomerID As Long
	
	Private _RegisteredID As System.Nullable(Of System.Guid)
	
	Private _CustEmail As String
	
	Private _CustFirstName As String
	
	Private _CustLastName As String
	
	Private _Company_ID As System.Nullable(Of Long)
	
	Private _Role_ID As Long
	
	Private _Company As EntityRef(Of Company)
	
	Private _UserRole As EntityRef(Of UserRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As Long)
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    Partial Private Sub OnRegisteredIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnRegisteredIDChanged()
    End Sub
    Partial Private Sub OnCustEmailChanging(value As String)
    End Sub
    Partial Private Sub OnCustEmailChanged()
    End Sub
    Partial Private Sub OnCustFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustFirstNameChanged()
    End Sub
    Partial Private Sub OnCustLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustLastNameChanged()
    End Sub
    Partial Private Sub OnCompany_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCompany_IDChanged()
    End Sub
    Partial Private Sub OnRole_IDChanging(value As Long)
    End Sub
    Partial Private Sub OnRole_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Company = CType(Nothing, EntityRef(Of Company))
		Me._UserRole = CType(Nothing, EntityRef(Of UserRole))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CustomerID() As Long
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				Me.OnCustomerIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerID = value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegisteredID", DbType:="UniqueIdentifier")>  _
	Public Property RegisteredID() As System.Nullable(Of System.Guid)
		Get
			Return Me._RegisteredID
		End Get
		Set
			If (Me._RegisteredID.Equals(value) = false) Then
				Me.OnRegisteredIDChanging(value)
				Me.SendPropertyChanging
				Me._RegisteredID = value
				Me.SendPropertyChanged("RegisteredID")
				Me.OnRegisteredIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustEmail", DbType:="NVarChar(50)")>  _
	Public Property CustEmail() As String
		Get
			Return Me._CustEmail
		End Get
		Set
			If (String.Equals(Me._CustEmail, value) = false) Then
				Me.OnCustEmailChanging(value)
				Me.SendPropertyChanging
				Me._CustEmail = value
				Me.SendPropertyChanged("CustEmail")
				Me.OnCustEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustFirstName", DbType:="NVarChar(50)")>  _
	Public Property CustFirstName() As String
		Get
			Return Me._CustFirstName
		End Get
		Set
			If (String.Equals(Me._CustFirstName, value) = false) Then
				Me.OnCustFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._CustFirstName = value
				Me.SendPropertyChanged("CustFirstName")
				Me.OnCustFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustLastName", DbType:="NVarChar(50)")>  _
	Public Property CustLastName() As String
		Get
			Return Me._CustLastName
		End Get
		Set
			If (String.Equals(Me._CustLastName, value) = false) Then
				Me.OnCustLastNameChanging(value)
				Me.SendPropertyChanging
				Me._CustLastName = value
				Me.SendPropertyChanged("CustLastName")
				Me.OnCustLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Company_ID", DbType:="BigInt")>  _
	Public Property Company_ID() As System.Nullable(Of Long)
		Get
			Return Me._Company_ID
		End Get
		Set
			If (Me._Company_ID.Equals(value) = false) Then
				If Me._Company.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCompany_IDChanging(value)
				Me.SendPropertyChanging
				Me._Company_ID = value
				Me.SendPropertyChanged("Company_ID")
				Me.OnCompany_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Role_ID", DbType:="BigInt NOT NULL")>  _
	Public Property Role_ID() As Long
		Get
			Return Me._Role_ID
		End Get
		Set
			If ((Me._Role_ID = value)  _
						= false) Then
				If Me._UserRole.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRole_IDChanging(value)
				Me.SendPropertyChanging
				Me._Role_ID = value
				Me.SendPropertyChanged("Role_ID")
				Me.OnRole_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Company_Customer", Storage:="_Company", ThisKey:="Company_ID", OtherKey:="CompanyID", IsForeignKey:=true)>  _
	Public Property Company() As Company
		Get
			Return Me._Company.Entity
		End Get
		Set
			Dim previousValue As Company = Me._Company.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Company.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Company.Entity = Nothing
					previousValue.Customers.Remove(Me)
				End If
				Me._Company.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Customers.Add(Me)
					Me._Company_ID = value.CompanyID
				Else
					Me._Company_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Company")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserRole_Customer", Storage:="_UserRole", ThisKey:="Role_ID", OtherKey:="RoleID", IsForeignKey:=true)>  _
	Public Property UserRole() As UserRole
		Get
			Return Me._UserRole.Entity
		End Get
		Set
			Dim previousValue As UserRole = Me._UserRole.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UserRole.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UserRole.Entity = Nothing
					previousValue.Customers.Remove(Me)
				End If
				Me._UserRole.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Customers.Add(Me)
					Me._Role_ID = value.RoleID
				Else
					Me._Role_ID = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("UserRole")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.QCOption")>  _
Partial Public Class QCOption
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _QCOptionID As Long
	
	Private _QCOptionCode As String
	
	Private _QCOptionDesc As String
	
	Private _CostUps As EntitySet(Of CostUp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQCOptionIDChanging(value As Long)
    End Sub
    Partial Private Sub OnQCOptionIDChanged()
    End Sub
    Partial Private Sub OnQCOptionCodeChanging(value As String)
    End Sub
    Partial Private Sub OnQCOptionCodeChanged()
    End Sub
    Partial Private Sub OnQCOptionDescChanging(value As String)
    End Sub
    Partial Private Sub OnQCOptionDescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CostUps = New EntitySet(Of CostUp)(AddressOf Me.attach_CostUps, AddressOf Me.detach_CostUps)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QCOptionID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property QCOptionID() As Long
		Get
			Return Me._QCOptionID
		End Get
		Set
			If ((Me._QCOptionID = value)  _
						= false) Then
				Me.OnQCOptionIDChanging(value)
				Me.SendPropertyChanging
				Me._QCOptionID = value
				Me.SendPropertyChanged("QCOptionID")
				Me.OnQCOptionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QCOptionCode", DbType:="VarChar(50)")>  _
	Public Property QCOptionCode() As String
		Get
			Return Me._QCOptionCode
		End Get
		Set
			If (String.Equals(Me._QCOptionCode, value) = false) Then
				Me.OnQCOptionCodeChanging(value)
				Me.SendPropertyChanging
				Me._QCOptionCode = value
				Me.SendPropertyChanged("QCOptionCode")
				Me.OnQCOptionCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QCOptionDesc", DbType:="VarChar(50)")>  _
	Public Property QCOptionDesc() As String
		Get
			Return Me._QCOptionDesc
		End Get
		Set
			If (String.Equals(Me._QCOptionDesc, value) = false) Then
				Me.OnQCOptionDescChanging(value)
				Me.SendPropertyChanging
				Me._QCOptionDesc = value
				Me.SendPropertyChanged("QCOptionDesc")
				Me.OnQCOptionDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QCOption_CostUp", Storage:="_CostUps", ThisKey:="QCOptionID", OtherKey:="QCOption_ID")>  _
	Public Property CostUps() As EntitySet(Of CostUp)
		Get
			Return Me._CostUps
		End Get
		Set
			Me._CostUps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.QCOption = Me
	End Sub
	
	Private Sub detach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.QCOption = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CostUp")>  _
Partial Public Class CostUp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CostUpID As Long
	
	Private _SensorType_ID As System.Nullable(Of Long)
	
	Private _CostType_ID As System.Nullable(Of Long)
	
	Private _WireCount_ID As System.Nullable(Of Long)
	
	Private _Cal_ID As Long
	
	Private _OD_ID As System.Nullable(Of Long)
	
	Private _Temp_ID As System.Nullable(Of Long)
	
	Private _CIP_ID As System.Nullable(Of Long)
	
	Private _CIPCap As String
	
	Private _IP_ID As System.Nullable(Of Long)
	
	Private _IPType_ID As System.Nullable(Of Long)
	
	Private _TWConfig_ID As System.Nullable(Of Long)
	
	Private _TWExtMat_ID As System.Nullable(Of Long)
	
	Private _TWExtLength_ID As System.Nullable(Of Long)
	
	Private _QCOption_ID As System.Nullable(Of Long)
	
	Private _SheathTermCode As String
	
	Private _LeadwireTermCode As String
	
	Private _ElementCode As String
	
	Private _CostUpCode As String
	
	Private _CostUpDesc As String
	
	Private _PPH As System.Nullable(Of Decimal)
	
	Private _Markup As System.Nullable(Of Decimal)
	
	Private _Overhead As System.Nullable(Of Decimal)
	
	Private _Extension_ID As System.Nullable(Of Long)
	
	Private _CostComponentKeys As EntitySet(Of CostComponentKey)
	
	Private _SensorType As EntityRef(Of SensorType)
	
	Private _CostType As EntityRef(Of CostType)
	
	Private _WireCount As EntityRef(Of WireCount)
	
	Private _Calibration As EntityRef(Of Calibration)
	
	Private _OD As EntityRef(Of OD)
	
	Private _Temperature As EntityRef(Of Temperature)
	
	Private _CIPCatagory As EntityRef(Of CIPCatagory)
	
	Private _IPCatagory As EntityRef(Of IPCatagory)
	
	Private _IPType As EntityRef(Of IPType)
	
	Private _TWConfiguration As EntityRef(Of TWConfiguration)
	
	Private _Material As EntityRef(Of Material)
	
	Private _TWExtLength As EntityRef(Of TWExtLength)
	
	Private _QCOption As EntityRef(Of QCOption)
	
	Private _ExtBaseCost As EntityRef(Of ExtBaseCost)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCostUpIDChanging(value As Long)
    End Sub
    Partial Private Sub OnCostUpIDChanged()
    End Sub
    Partial Private Sub OnSensorType_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnSensorType_IDChanged()
    End Sub
    Partial Private Sub OnCostType_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCostType_IDChanged()
    End Sub
    Partial Private Sub OnWireCount_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnWireCount_IDChanged()
    End Sub
    Partial Private Sub OnCal_IDChanging(value As Long)
    End Sub
    Partial Private Sub OnCal_IDChanged()
    End Sub
    Partial Private Sub OnOD_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnOD_IDChanged()
    End Sub
    Partial Private Sub OnTemp_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnTemp_IDChanged()
    End Sub
    Partial Private Sub OnCIP_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCIP_IDChanged()
    End Sub
    Partial Private Sub OnCIPCapChanging(value As String)
    End Sub
    Partial Private Sub OnCIPCapChanged()
    End Sub
    Partial Private Sub OnIP_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnIP_IDChanged()
    End Sub
    Partial Private Sub OnIPType_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnIPType_IDChanged()
    End Sub
    Partial Private Sub OnTWConfig_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnTWConfig_IDChanged()
    End Sub
    Partial Private Sub OnTWExtMat_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnTWExtMat_IDChanged()
    End Sub
    Partial Private Sub OnTWExtLength_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnTWExtLength_IDChanged()
    End Sub
    Partial Private Sub OnQCOption_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnQCOption_IDChanged()
    End Sub
    Partial Private Sub OnSheathTermCodeChanging(value As String)
    End Sub
    Partial Private Sub OnSheathTermCodeChanged()
    End Sub
    Partial Private Sub OnLeadwireTermCodeChanging(value As String)
    End Sub
    Partial Private Sub OnLeadwireTermCodeChanged()
    End Sub
    Partial Private Sub OnElementCodeChanging(value As String)
    End Sub
    Partial Private Sub OnElementCodeChanged()
    End Sub
    Partial Private Sub OnCostUpCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCostUpCodeChanged()
    End Sub
    Partial Private Sub OnCostUpDescChanging(value As String)
    End Sub
    Partial Private Sub OnCostUpDescChanged()
    End Sub
    Partial Private Sub OnPPHChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPPHChanged()
    End Sub
    Partial Private Sub OnMarkupChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMarkupChanged()
    End Sub
    Partial Private Sub OnOverheadChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnOverheadChanged()
    End Sub
    Partial Private Sub OnExtension_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnExtension_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CostComponentKeys = New EntitySet(Of CostComponentKey)(AddressOf Me.attach_CostComponentKeys, AddressOf Me.detach_CostComponentKeys)
		Me._SensorType = CType(Nothing, EntityRef(Of SensorType))
		Me._CostType = CType(Nothing, EntityRef(Of CostType))
		Me._WireCount = CType(Nothing, EntityRef(Of WireCount))
		Me._Calibration = CType(Nothing, EntityRef(Of Calibration))
		Me._OD = CType(Nothing, EntityRef(Of OD))
		Me._Temperature = CType(Nothing, EntityRef(Of Temperature))
		Me._CIPCatagory = CType(Nothing, EntityRef(Of CIPCatagory))
		Me._IPCatagory = CType(Nothing, EntityRef(Of IPCatagory))
		Me._IPType = CType(Nothing, EntityRef(Of IPType))
		Me._TWConfiguration = CType(Nothing, EntityRef(Of TWConfiguration))
		Me._Material = CType(Nothing, EntityRef(Of Material))
		Me._TWExtLength = CType(Nothing, EntityRef(Of TWExtLength))
		Me._QCOption = CType(Nothing, EntityRef(Of QCOption))
		Me._ExtBaseCost = CType(Nothing, EntityRef(Of ExtBaseCost))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostUpID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CostUpID() As Long
		Get
			Return Me._CostUpID
		End Get
		Set
			If ((Me._CostUpID = value)  _
						= false) Then
				Me.OnCostUpIDChanging(value)
				Me.SendPropertyChanging
				Me._CostUpID = value
				Me.SendPropertyChanged("CostUpID")
				Me.OnCostUpIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SensorType_ID", DbType:="BigInt")>  _
	Public Property SensorType_ID() As System.Nullable(Of Long)
		Get
			Return Me._SensorType_ID
		End Get
		Set
			If (Me._SensorType_ID.Equals(value) = false) Then
				If Me._SensorType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSensorType_IDChanging(value)
				Me.SendPropertyChanging
				Me._SensorType_ID = value
				Me.SendPropertyChanged("SensorType_ID")
				Me.OnSensorType_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostType_ID", DbType:="BigInt")>  _
	Public Property CostType_ID() As System.Nullable(Of Long)
		Get
			Return Me._CostType_ID
		End Get
		Set
			If (Me._CostType_ID.Equals(value) = false) Then
				If Me._CostType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCostType_IDChanging(value)
				Me.SendPropertyChanging
				Me._CostType_ID = value
				Me.SendPropertyChanged("CostType_ID")
				Me.OnCostType_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WireCount_ID", DbType:="BigInt")>  _
	Public Property WireCount_ID() As System.Nullable(Of Long)
		Get
			Return Me._WireCount_ID
		End Get
		Set
			If (Me._WireCount_ID.Equals(value) = false) Then
				If Me._WireCount.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnWireCount_IDChanging(value)
				Me.SendPropertyChanging
				Me._WireCount_ID = value
				Me.SendPropertyChanged("WireCount_ID")
				Me.OnWireCount_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cal_ID", DbType:="BigInt NOT NULL")>  _
	Public Property Cal_ID() As Long
		Get
			Return Me._Cal_ID
		End Get
		Set
			If ((Me._Cal_ID = value)  _
						= false) Then
				If Me._Calibration.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCal_IDChanging(value)
				Me.SendPropertyChanging
				Me._Cal_ID = value
				Me.SendPropertyChanged("Cal_ID")
				Me.OnCal_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OD_ID", DbType:="BigInt")>  _
	Public Property OD_ID() As System.Nullable(Of Long)
		Get
			Return Me._OD_ID
		End Get
		Set
			If (Me._OD_ID.Equals(value) = false) Then
				If Me._OD.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOD_IDChanging(value)
				Me.SendPropertyChanging
				Me._OD_ID = value
				Me.SendPropertyChanged("OD_ID")
				Me.OnOD_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Temp_ID", DbType:="BigInt")>  _
	Public Property Temp_ID() As System.Nullable(Of Long)
		Get
			Return Me._Temp_ID
		End Get
		Set
			If (Me._Temp_ID.Equals(value) = false) Then
				If Me._Temperature.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTemp_IDChanging(value)
				Me.SendPropertyChanging
				Me._Temp_ID = value
				Me.SendPropertyChanged("Temp_ID")
				Me.OnTemp_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIP_ID", DbType:="BigInt")>  _
	Public Property CIP_ID() As System.Nullable(Of Long)
		Get
			Return Me._CIP_ID
		End Get
		Set
			If (Me._CIP_ID.Equals(value) = false) Then
				If Me._CIPCatagory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCIP_IDChanging(value)
				Me.SendPropertyChanging
				Me._CIP_ID = value
				Me.SendPropertyChanged("CIP_ID")
				Me.OnCIP_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIPCap", DbType:="VarChar(50)")>  _
	Public Property CIPCap() As String
		Get
			Return Me._CIPCap
		End Get
		Set
			If (String.Equals(Me._CIPCap, value) = false) Then
				Me.OnCIPCapChanging(value)
				Me.SendPropertyChanging
				Me._CIPCap = value
				Me.SendPropertyChanged("CIPCap")
				Me.OnCIPCapChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IP_ID", DbType:="BigInt")>  _
	Public Property IP_ID() As System.Nullable(Of Long)
		Get
			Return Me._IP_ID
		End Get
		Set
			If (Me._IP_ID.Equals(value) = false) Then
				If Me._IPCatagory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIP_IDChanging(value)
				Me.SendPropertyChanging
				Me._IP_ID = value
				Me.SendPropertyChanged("IP_ID")
				Me.OnIP_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPType_ID", DbType:="BigInt")>  _
	Public Property IPType_ID() As System.Nullable(Of Long)
		Get
			Return Me._IPType_ID
		End Get
		Set
			If (Me._IPType_ID.Equals(value) = false) Then
				If Me._IPType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIPType_IDChanging(value)
				Me.SendPropertyChanging
				Me._IPType_ID = value
				Me.SendPropertyChanged("IPType_ID")
				Me.OnIPType_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TWConfig_ID", DbType:="BigInt")>  _
	Public Property TWConfig_ID() As System.Nullable(Of Long)
		Get
			Return Me._TWConfig_ID
		End Get
		Set
			If (Me._TWConfig_ID.Equals(value) = false) Then
				If Me._TWConfiguration.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTWConfig_IDChanging(value)
				Me.SendPropertyChanging
				Me._TWConfig_ID = value
				Me.SendPropertyChanged("TWConfig_ID")
				Me.OnTWConfig_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TWExtMat_ID", DbType:="BigInt")>  _
	Public Property TWExtMat_ID() As System.Nullable(Of Long)
		Get
			Return Me._TWExtMat_ID
		End Get
		Set
			If (Me._TWExtMat_ID.Equals(value) = false) Then
				If Me._Material.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTWExtMat_IDChanging(value)
				Me.SendPropertyChanging
				Me._TWExtMat_ID = value
				Me.SendPropertyChanged("TWExtMat_ID")
				Me.OnTWExtMat_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TWExtLength_ID", DbType:="BigInt")>  _
	Public Property TWExtLength_ID() As System.Nullable(Of Long)
		Get
			Return Me._TWExtLength_ID
		End Get
		Set
			If (Me._TWExtLength_ID.Equals(value) = false) Then
				If Me._TWExtLength.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTWExtLength_IDChanging(value)
				Me.SendPropertyChanging
				Me._TWExtLength_ID = value
				Me.SendPropertyChanged("TWExtLength_ID")
				Me.OnTWExtLength_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QCOption_ID", DbType:="BigInt")>  _
	Public Property QCOption_ID() As System.Nullable(Of Long)
		Get
			Return Me._QCOption_ID
		End Get
		Set
			If (Me._QCOption_ID.Equals(value) = false) Then
				If Me._QCOption.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnQCOption_IDChanging(value)
				Me.SendPropertyChanging
				Me._QCOption_ID = value
				Me.SendPropertyChanged("QCOption_ID")
				Me.OnQCOption_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SheathTermCode", DbType:="VarChar(50)")>  _
	Public Property SheathTermCode() As String
		Get
			Return Me._SheathTermCode
		End Get
		Set
			If (String.Equals(Me._SheathTermCode, value) = false) Then
				Me.OnSheathTermCodeChanging(value)
				Me.SendPropertyChanging
				Me._SheathTermCode = value
				Me.SendPropertyChanged("SheathTermCode")
				Me.OnSheathTermCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LeadwireTermCode", DbType:="VarChar(50)")>  _
	Public Property LeadwireTermCode() As String
		Get
			Return Me._LeadwireTermCode
		End Get
		Set
			If (String.Equals(Me._LeadwireTermCode, value) = false) Then
				Me.OnLeadwireTermCodeChanging(value)
				Me.SendPropertyChanging
				Me._LeadwireTermCode = value
				Me.SendPropertyChanged("LeadwireTermCode")
				Me.OnLeadwireTermCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ElementCode", DbType:="VarChar(50)")>  _
	Public Property ElementCode() As String
		Get
			Return Me._ElementCode
		End Get
		Set
			If (String.Equals(Me._ElementCode, value) = false) Then
				Me.OnElementCodeChanging(value)
				Me.SendPropertyChanging
				Me._ElementCode = value
				Me.SendPropertyChanged("ElementCode")
				Me.OnElementCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostUpCode", DbType:="VarChar(50)")>  _
	Public Property CostUpCode() As String
		Get
			Return Me._CostUpCode
		End Get
		Set
			If (String.Equals(Me._CostUpCode, value) = false) Then
				Me.OnCostUpCodeChanging(value)
				Me.SendPropertyChanging
				Me._CostUpCode = value
				Me.SendPropertyChanged("CostUpCode")
				Me.OnCostUpCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CostUpDesc", DbType:="VarChar(MAX)")>  _
	Public Property CostUpDesc() As String
		Get
			Return Me._CostUpDesc
		End Get
		Set
			If (String.Equals(Me._CostUpDesc, value) = false) Then
				Me.OnCostUpDescChanging(value)
				Me.SendPropertyChanging
				Me._CostUpDesc = value
				Me.SendPropertyChanged("CostUpDesc")
				Me.OnCostUpDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PPH", DbType:="Decimal(18,3)")>  _
	Public Property PPH() As System.Nullable(Of Decimal)
		Get
			Return Me._PPH
		End Get
		Set
			If (Me._PPH.Equals(value) = false) Then
				Me.OnPPHChanging(value)
				Me.SendPropertyChanging
				Me._PPH = value
				Me.SendPropertyChanged("PPH")
				Me.OnPPHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Markup", DbType:="Decimal(18,3)")>  _
	Public Property Markup() As System.Nullable(Of Decimal)
		Get
			Return Me._Markup
		End Get
		Set
			If (Me._Markup.Equals(value) = false) Then
				Me.OnMarkupChanging(value)
				Me.SendPropertyChanging
				Me._Markup = value
				Me.SendPropertyChanged("Markup")
				Me.OnMarkupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Overhead", DbType:="Decimal(18,2)")>  _
	Public Property Overhead() As System.Nullable(Of Decimal)
		Get
			Return Me._Overhead
		End Get
		Set
			If (Me._Overhead.Equals(value) = false) Then
				Me.OnOverheadChanging(value)
				Me.SendPropertyChanging
				Me._Overhead = value
				Me.SendPropertyChanged("Overhead")
				Me.OnOverheadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Extension_ID", DbType:="BigInt")>  _
	Public Property Extension_ID() As System.Nullable(Of Long)
		Get
			Return Me._Extension_ID
		End Get
		Set
			If (Me._Extension_ID.Equals(value) = false) Then
				If Me._ExtBaseCost.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnExtension_IDChanging(value)
				Me.SendPropertyChanging
				Me._Extension_ID = value
				Me.SendPropertyChanged("Extension_ID")
				Me.OnExtension_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CostUp_CostComponentKey", Storage:="_CostComponentKeys", ThisKey:="CostUpID", OtherKey:="CostUp_ID")>  _
	Public Property CostComponentKeys() As EntitySet(Of CostComponentKey)
		Get
			Return Me._CostComponentKeys
		End Get
		Set
			Me._CostComponentKeys.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SensorType_CostUp", Storage:="_SensorType", ThisKey:="SensorType_ID", OtherKey:="TypeID", IsForeignKey:=true)>  _
	Public Property SensorType() As SensorType
		Get
			Return Me._SensorType.Entity
		End Get
		Set
			Dim previousValue As SensorType = Me._SensorType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SensorType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SensorType.Entity = Nothing
					previousValue.CostUps.Remove(Me)
				End If
				Me._SensorType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CostUps.Add(Me)
					Me._SensorType_ID = value.TypeID
				Else
					Me._SensorType_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("SensorType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CostType_CostUp", Storage:="_CostType", ThisKey:="CostType_ID", OtherKey:="CostTypeID", IsForeignKey:=true)>  _
	Public Property CostType() As CostType
		Get
			Return Me._CostType.Entity
		End Get
		Set
			Dim previousValue As CostType = Me._CostType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CostType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CostType.Entity = Nothing
					previousValue.CostUps.Remove(Me)
				End If
				Me._CostType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CostUps.Add(Me)
					Me._CostType_ID = value.CostTypeID
				Else
					Me._CostType_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("CostType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="WireCount_CostUp", Storage:="_WireCount", ThisKey:="WireCount_ID", OtherKey:="WireCountID", IsForeignKey:=true)>  _
	Public Property WireCount() As WireCount
		Get
			Return Me._WireCount.Entity
		End Get
		Set
			Dim previousValue As WireCount = Me._WireCount.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._WireCount.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._WireCount.Entity = Nothing
					previousValue.CostUps.Remove(Me)
				End If
				Me._WireCount.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CostUps.Add(Me)
					Me._WireCount_ID = value.WireCountID
				Else
					Me._WireCount_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("WireCount")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Calibration_CostUp", Storage:="_Calibration", ThisKey:="Cal_ID", OtherKey:="CalID", IsForeignKey:=true)>  _
	Public Property Calibration() As Calibration
		Get
			Return Me._Calibration.Entity
		End Get
		Set
			Dim previousValue As Calibration = Me._Calibration.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Calibration.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Calibration.Entity = Nothing
					previousValue.CostUps.Remove(Me)
				End If
				Me._Calibration.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CostUps.Add(Me)
					Me._Cal_ID = value.CalID
				Else
					Me._Cal_ID = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("Calibration")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OD_CostUp", Storage:="_OD", ThisKey:="OD_ID", OtherKey:="ODID", IsForeignKey:=true)>  _
	Public Property OD() As OD
		Get
			Return Me._OD.Entity
		End Get
		Set
			Dim previousValue As OD = Me._OD.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OD.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OD.Entity = Nothing
					previousValue.CostUps.Remove(Me)
				End If
				Me._OD.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CostUps.Add(Me)
					Me._OD_ID = value.ODID
				Else
					Me._OD_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("OD")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Temperature_CostUp", Storage:="_Temperature", ThisKey:="Temp_ID", OtherKey:="TempID", IsForeignKey:=true)>  _
	Public Property Temperature() As Temperature
		Get
			Return Me._Temperature.Entity
		End Get
		Set
			Dim previousValue As Temperature = Me._Temperature.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Temperature.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Temperature.Entity = Nothing
					previousValue.CostUps.Remove(Me)
				End If
				Me._Temperature.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CostUps.Add(Me)
					Me._Temp_ID = value.TempID
				Else
					Me._Temp_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Temperature")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CIPCatagory_CostUp", Storage:="_CIPCatagory", ThisKey:="CIP_ID", OtherKey:="CIPID", IsForeignKey:=true)>  _
	Public Property CIPCatagory() As CIPCatagory
		Get
			Return Me._CIPCatagory.Entity
		End Get
		Set
			Dim previousValue As CIPCatagory = Me._CIPCatagory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CIPCatagory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CIPCatagory.Entity = Nothing
					previousValue.CostUps.Remove(Me)
				End If
				Me._CIPCatagory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CostUps.Add(Me)
					Me._CIP_ID = value.CIPID
				Else
					Me._CIP_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("CIPCatagory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IPCatagory_CostUp", Storage:="_IPCatagory", ThisKey:="IP_ID", OtherKey:="IPID", IsForeignKey:=true)>  _
	Public Property IPCatagory() As IPCatagory
		Get
			Return Me._IPCatagory.Entity
		End Get
		Set
			Dim previousValue As IPCatagory = Me._IPCatagory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPCatagory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPCatagory.Entity = Nothing
					previousValue.CostUps.Remove(Me)
				End If
				Me._IPCatagory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CostUps.Add(Me)
					Me._IP_ID = value.IPID
				Else
					Me._IP_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("IPCatagory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IPType_CostUp", Storage:="_IPType", ThisKey:="IPType_ID", OtherKey:="IPTypeID", IsForeignKey:=true)>  _
	Public Property IPType() As IPType
		Get
			Return Me._IPType.Entity
		End Get
		Set
			Dim previousValue As IPType = Me._IPType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IPType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IPType.Entity = Nothing
					previousValue.CostUps.Remove(Me)
				End If
				Me._IPType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CostUps.Add(Me)
					Me._IPType_ID = value.IPTypeID
				Else
					Me._IPType_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("IPType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TWConfiguration_CostUp", Storage:="_TWConfiguration", ThisKey:="TWConfig_ID", OtherKey:="TWConfigID", IsForeignKey:=true)>  _
	Public Property TWConfiguration() As TWConfiguration
		Get
			Return Me._TWConfiguration.Entity
		End Get
		Set
			Dim previousValue As TWConfiguration = Me._TWConfiguration.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TWConfiguration.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TWConfiguration.Entity = Nothing
					previousValue.CostUps.Remove(Me)
				End If
				Me._TWConfiguration.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CostUps.Add(Me)
					Me._TWConfig_ID = value.TWConfigID
				Else
					Me._TWConfig_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("TWConfiguration")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Material_CostUp", Storage:="_Material", ThisKey:="TWExtMat_ID", OtherKey:="MaterialID", IsForeignKey:=true)>  _
	Public Property Material() As Material
		Get
			Return Me._Material.Entity
		End Get
		Set
			Dim previousValue As Material = Me._Material.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Material.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Material.Entity = Nothing
					previousValue.CostUps.Remove(Me)
				End If
				Me._Material.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CostUps.Add(Me)
					Me._TWExtMat_ID = value.MaterialID
				Else
					Me._TWExtMat_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Material")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TWExtLength_CostUp", Storage:="_TWExtLength", ThisKey:="TWExtLength_ID", OtherKey:="TWExtLengthID", IsForeignKey:=true)>  _
	Public Property TWExtLength() As TWExtLength
		Get
			Return Me._TWExtLength.Entity
		End Get
		Set
			Dim previousValue As TWExtLength = Me._TWExtLength.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TWExtLength.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TWExtLength.Entity = Nothing
					previousValue.CostUps.Remove(Me)
				End If
				Me._TWExtLength.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CostUps.Add(Me)
					Me._TWExtLength_ID = value.TWExtLengthID
				Else
					Me._TWExtLength_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("TWExtLength")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="QCOption_CostUp", Storage:="_QCOption", ThisKey:="QCOption_ID", OtherKey:="QCOptionID", IsForeignKey:=true)>  _
	Public Property QCOption() As QCOption
		Get
			Return Me._QCOption.Entity
		End Get
		Set
			Dim previousValue As QCOption = Me._QCOption.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._QCOption.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._QCOption.Entity = Nothing
					previousValue.CostUps.Remove(Me)
				End If
				Me._QCOption.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CostUps.Add(Me)
					Me._QCOption_ID = value.QCOptionID
				Else
					Me._QCOption_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("QCOption")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExtBaseCost_CostUp", Storage:="_ExtBaseCost", ThisKey:="Extension_ID", OtherKey:="ExtBaseCostID", IsForeignKey:=true)>  _
	Public Property ExtBaseCost() As ExtBaseCost
		Get
			Return Me._ExtBaseCost.Entity
		End Get
		Set
			Dim previousValue As ExtBaseCost = Me._ExtBaseCost.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ExtBaseCost.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ExtBaseCost.Entity = Nothing
					previousValue.CostUps.Remove(Me)
				End If
				Me._ExtBaseCost.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CostUps.Add(Me)
					Me._Extension_ID = value.ExtBaseCostID
				Else
					Me._Extension_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("ExtBaseCost")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CostComponentKeys(ByVal entity As CostComponentKey)
		Me.SendPropertyChanging
		entity.CostUp = Me
	End Sub
	
	Private Sub detach_CostComponentKeys(ByVal entity As CostComponentKey)
		Me.SendPropertyChanging
		entity.CostUp = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ExtBaseCost")>  _
Partial Public Class ExtBaseCost
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ExtBaseCostID As Long
	
	Private _ExtBaseCost As System.Nullable(Of Decimal)
	
	Private _CostUps As EntitySet(Of CostUp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnExtBaseCostIDChanging(value As Long)
    End Sub
    Partial Private Sub OnExtBaseCostIDChanged()
    End Sub
    Partial Private Sub OnExtBaseCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnExtBaseCostChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CostUps = New EntitySet(Of CostUp)(AddressOf Me.attach_CostUps, AddressOf Me.detach_CostUps)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExtBaseCostID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ExtBaseCostID() As Long
		Get
			Return Me._ExtBaseCostID
		End Get
		Set
			If ((Me._ExtBaseCostID = value)  _
						= false) Then
				Me.OnExtBaseCostIDChanging(value)
				Me.SendPropertyChanging
				Me._ExtBaseCostID = value
				Me.SendPropertyChanged("ExtBaseCostID")
				Me.OnExtBaseCostIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExtBaseCost", DbType:="Money")>  _
	Public Property ExtBaseCost() As System.Nullable(Of Decimal)
		Get
			Return Me._ExtBaseCost
		End Get
		Set
			If (Me._ExtBaseCost.Equals(value) = false) Then
				Me.OnExtBaseCostChanging(value)
				Me.SendPropertyChanging
				Me._ExtBaseCost = value
				Me.SendPropertyChanged("ExtBaseCost")
				Me.OnExtBaseCostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExtBaseCost_CostUp", Storage:="_CostUps", ThisKey:="ExtBaseCostID", OtherKey:="Extension_ID")>  _
	Public Property CostUps() As EntitySet(Of CostUp)
		Get
			Return Me._CostUps
		End Get
		Set
			Me._CostUps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.ExtBaseCost = Me
	End Sub
	
	Private Sub detach_CostUps(ByVal entity As CostUp)
		Me.SendPropertyChanging
		entity.ExtBaseCost = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DistStateKey")>  _
Partial Public Class DistStateKey
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DistStateID As Long
	
	Private _Distributor_ID As System.Nullable(Of Long)
	
	Private _State_ID As System.Nullable(Of Long)
	
	Private _State As EntityRef(Of State)
	
	Private _Distributor As EntityRef(Of Distributor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDistStateIDChanging(value As Long)
    End Sub
    Partial Private Sub OnDistStateIDChanged()
    End Sub
    Partial Private Sub OnDistributor_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnDistributor_IDChanged()
    End Sub
    Partial Private Sub OnState_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnState_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._State = CType(Nothing, EntityRef(Of State))
		Me._Distributor = CType(Nothing, EntityRef(Of Distributor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistStateID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DistStateID() As Long
		Get
			Return Me._DistStateID
		End Get
		Set
			If ((Me._DistStateID = value)  _
						= false) Then
				Me.OnDistStateIDChanging(value)
				Me.SendPropertyChanging
				Me._DistStateID = value
				Me.SendPropertyChanged("DistStateID")
				Me.OnDistStateIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Distributor_ID", DbType:="BigInt")>  _
	Public Property Distributor_ID() As System.Nullable(Of Long)
		Get
			Return Me._Distributor_ID
		End Get
		Set
			If (Me._Distributor_ID.Equals(value) = false) Then
				If Me._Distributor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDistributor_IDChanging(value)
				Me.SendPropertyChanging
				Me._Distributor_ID = value
				Me.SendPropertyChanged("Distributor_ID")
				Me.OnDistributor_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State_ID", DbType:="BigInt")>  _
	Public Property State_ID() As System.Nullable(Of Long)
		Get
			Return Me._State_ID
		End Get
		Set
			If (Me._State_ID.Equals(value) = false) Then
				If Me._State.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnState_IDChanging(value)
				Me.SendPropertyChanging
				Me._State_ID = value
				Me.SendPropertyChanged("State_ID")
				Me.OnState_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="State_DistStateKey", Storage:="_State", ThisKey:="State_ID", OtherKey:="StateID", IsForeignKey:=true)>  _
	Public Property State() As State
		Get
			Return Me._State.Entity
		End Get
		Set
			Dim previousValue As State = Me._State.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._State.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._State.Entity = Nothing
					previousValue.DistStateKeys.Remove(Me)
				End If
				Me._State.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DistStateKeys.Add(Me)
					Me._State_ID = value.StateID
				Else
					Me._State_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("State")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Distributor_DistStateKey", Storage:="_Distributor", ThisKey:="Distributor_ID", OtherKey:="DistributorID", IsForeignKey:=true)>  _
	Public Property Distributor() As Distributor
		Get
			Return Me._Distributor.Entity
		End Get
		Set
			Dim previousValue As Distributor = Me._Distributor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Distributor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Distributor.Entity = Nothing
					previousValue.DistStateKeys.Remove(Me)
				End If
				Me._Distributor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DistStateKeys.Add(Me)
					Me._Distributor_ID = value.DistributorID
				Else
					Me._Distributor_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Distributor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.State")>  _
Partial Public Class State
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StateID As Long
	
	Private _StateName As String
	
	Private _StateAbbrev As String
	
	Private _DistStateKeys As EntitySet(Of DistStateKey)
	
	Private _Distributors As EntitySet(Of Distributor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStateIDChanging(value As Long)
    End Sub
    Partial Private Sub OnStateIDChanged()
    End Sub
    Partial Private Sub OnStateNameChanging(value As String)
    End Sub
    Partial Private Sub OnStateNameChanged()
    End Sub
    Partial Private Sub OnStateAbbrevChanging(value As String)
    End Sub
    Partial Private Sub OnStateAbbrevChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DistStateKeys = New EntitySet(Of DistStateKey)(AddressOf Me.attach_DistStateKeys, AddressOf Me.detach_DistStateKeys)
		Me._Distributors = New EntitySet(Of Distributor)(AddressOf Me.attach_Distributors, AddressOf Me.detach_Distributors)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property StateID() As Long
		Get
			Return Me._StateID
		End Get
		Set
			If ((Me._StateID = value)  _
						= false) Then
				Me.OnStateIDChanging(value)
				Me.SendPropertyChanging
				Me._StateID = value
				Me.SendPropertyChanged("StateID")
				Me.OnStateIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateName", DbType:="VarChar(50)")>  _
	Public Property StateName() As String
		Get
			Return Me._StateName
		End Get
		Set
			If (String.Equals(Me._StateName, value) = false) Then
				Me.OnStateNameChanging(value)
				Me.SendPropertyChanging
				Me._StateName = value
				Me.SendPropertyChanged("StateName")
				Me.OnStateNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateAbbrev", DbType:="VarChar(50)")>  _
	Public Property StateAbbrev() As String
		Get
			Return Me._StateAbbrev
		End Get
		Set
			If (String.Equals(Me._StateAbbrev, value) = false) Then
				Me.OnStateAbbrevChanging(value)
				Me.SendPropertyChanging
				Me._StateAbbrev = value
				Me.SendPropertyChanged("StateAbbrev")
				Me.OnStateAbbrevChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="State_DistStateKey", Storage:="_DistStateKeys", ThisKey:="StateID", OtherKey:="State_ID")>  _
	Public Property DistStateKeys() As EntitySet(Of DistStateKey)
		Get
			Return Me._DistStateKeys
		End Get
		Set
			Me._DistStateKeys.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="State_Distributor", Storage:="_Distributors", ThisKey:="StateID", OtherKey:="State_ID")>  _
	Public Property Distributors() As EntitySet(Of Distributor)
		Get
			Return Me._Distributors
		End Get
		Set
			Me._Distributors.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DistStateKeys(ByVal entity As DistStateKey)
		Me.SendPropertyChanging
		entity.State = Me
	End Sub
	
	Private Sub detach_DistStateKeys(ByVal entity As DistStateKey)
		Me.SendPropertyChanging
		entity.State = Nothing
	End Sub
	
	Private Sub attach_Distributors(ByVal entity As Distributor)
		Me.SendPropertyChanging
		entity.State = Me
	End Sub
	
	Private Sub detach_Distributors(ByVal entity As Distributor)
		Me.SendPropertyChanging
		entity.State = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PageType")>  _
Partial Public Class PageType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PageTypeID As Long
	
	Private _PageTypeDesc As String
	
	Private _Pages As EntitySet(Of Page)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPageTypeIDChanging(value As Long)
    End Sub
    Partial Private Sub OnPageTypeIDChanged()
    End Sub
    Partial Private Sub OnPageTypeDescChanging(value As String)
    End Sub
    Partial Private Sub OnPageTypeDescChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Pages = New EntitySet(Of Page)(AddressOf Me.attach_Pages, AddressOf Me.detach_Pages)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageTypeID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PageTypeID() As Long
		Get
			Return Me._PageTypeID
		End Get
		Set
			If ((Me._PageTypeID = value)  _
						= false) Then
				Me.OnPageTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._PageTypeID = value
				Me.SendPropertyChanged("PageTypeID")
				Me.OnPageTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageTypeDesc", DbType:="NVarChar(50)")>  _
	Public Property PageTypeDesc() As String
		Get
			Return Me._PageTypeDesc
		End Get
		Set
			If (String.Equals(Me._PageTypeDesc, value) = false) Then
				Me.OnPageTypeDescChanging(value)
				Me.SendPropertyChanging
				Me._PageTypeDesc = value
				Me.SendPropertyChanged("PageTypeDesc")
				Me.OnPageTypeDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PageType_Page", Storage:="_Pages", ThisKey:="PageTypeID", OtherKey:="PageType_ID")>  _
	Public Property Pages() As EntitySet(Of Page)
		Get
			Return Me._Pages
		End Get
		Set
			Me._Pages.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Pages(ByVal entity As Page)
		Me.SendPropertyChanging
		entity.PageType = Me
	End Sub
	
	Private Sub detach_Pages(ByVal entity As Page)
		Me.SendPropertyChanging
		entity.PageType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Page")>  _
Partial Public Class Page
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PageID As Long
	
	Private _PageHeader As String
	
	Private _PageDesc As String
	
	Private _PageImg As String
	
	Private _PageURL As String
	
	Private _PageType_ID As System.Nullable(Of Long)
	
	Private _PageOrderBy As System.Nullable(Of Long)
	
	Private _PageDisplayChar As System.Nullable(Of Long)
	
	Private _PageType As EntityRef(Of PageType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPageIDChanging(value As Long)
    End Sub
    Partial Private Sub OnPageIDChanged()
    End Sub
    Partial Private Sub OnPageHeaderChanging(value As String)
    End Sub
    Partial Private Sub OnPageHeaderChanged()
    End Sub
    Partial Private Sub OnPageDescChanging(value As String)
    End Sub
    Partial Private Sub OnPageDescChanged()
    End Sub
    Partial Private Sub OnPageImgChanging(value As String)
    End Sub
    Partial Private Sub OnPageImgChanged()
    End Sub
    Partial Private Sub OnPageURLChanging(value As String)
    End Sub
    Partial Private Sub OnPageURLChanged()
    End Sub
    Partial Private Sub OnPageType_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnPageType_IDChanged()
    End Sub
    Partial Private Sub OnPageOrderByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnPageOrderByChanged()
    End Sub
    Partial Private Sub OnPageDisplayCharChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnPageDisplayCharChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PageType = CType(Nothing, EntityRef(Of PageType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PageID() As Long
		Get
			Return Me._PageID
		End Get
		Set
			If ((Me._PageID = value)  _
						= false) Then
				Me.OnPageIDChanging(value)
				Me.SendPropertyChanging
				Me._PageID = value
				Me.SendPropertyChanged("PageID")
				Me.OnPageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageHeader", DbType:="NVarChar(50)")>  _
	Public Property PageHeader() As String
		Get
			Return Me._PageHeader
		End Get
		Set
			If (String.Equals(Me._PageHeader, value) = false) Then
				Me.OnPageHeaderChanging(value)
				Me.SendPropertyChanging
				Me._PageHeader = value
				Me.SendPropertyChanged("PageHeader")
				Me.OnPageHeaderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageDesc", DbType:="NVarChar(MAX)")>  _
	Public Property PageDesc() As String
		Get
			Return Me._PageDesc
		End Get
		Set
			If (String.Equals(Me._PageDesc, value) = false) Then
				Me.OnPageDescChanging(value)
				Me.SendPropertyChanging
				Me._PageDesc = value
				Me.SendPropertyChanged("PageDesc")
				Me.OnPageDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageImg", DbType:="NVarChar(50)")>  _
	Public Property PageImg() As String
		Get
			Return Me._PageImg
		End Get
		Set
			If (String.Equals(Me._PageImg, value) = false) Then
				Me.OnPageImgChanging(value)
				Me.SendPropertyChanging
				Me._PageImg = value
				Me.SendPropertyChanged("PageImg")
				Me.OnPageImgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageURL", DbType:="NVarChar(50)")>  _
	Public Property PageURL() As String
		Get
			Return Me._PageURL
		End Get
		Set
			If (String.Equals(Me._PageURL, value) = false) Then
				Me.OnPageURLChanging(value)
				Me.SendPropertyChanging
				Me._PageURL = value
				Me.SendPropertyChanged("PageURL")
				Me.OnPageURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageType_ID", DbType:="BigInt")>  _
	Public Property PageType_ID() As System.Nullable(Of Long)
		Get
			Return Me._PageType_ID
		End Get
		Set
			If (Me._PageType_ID.Equals(value) = false) Then
				If Me._PageType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPageType_IDChanging(value)
				Me.SendPropertyChanging
				Me._PageType_ID = value
				Me.SendPropertyChanged("PageType_ID")
				Me.OnPageType_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageOrderBy", DbType:="BigInt")>  _
	Public Property PageOrderBy() As System.Nullable(Of Long)
		Get
			Return Me._PageOrderBy
		End Get
		Set
			If (Me._PageOrderBy.Equals(value) = false) Then
				Me.OnPageOrderByChanging(value)
				Me.SendPropertyChanging
				Me._PageOrderBy = value
				Me.SendPropertyChanged("PageOrderBy")
				Me.OnPageOrderByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageDisplayChar", DbType:="BigInt")>  _
	Public Property PageDisplayChar() As System.Nullable(Of Long)
		Get
			Return Me._PageDisplayChar
		End Get
		Set
			If (Me._PageDisplayChar.Equals(value) = false) Then
				Me.OnPageDisplayCharChanging(value)
				Me.SendPropertyChanging
				Me._PageDisplayChar = value
				Me.SendPropertyChanged("PageDisplayChar")
				Me.OnPageDisplayCharChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PageType_Page", Storage:="_PageType", ThisKey:="PageType_ID", OtherKey:="PageTypeID", IsForeignKey:=true)>  _
	Public Property PageType() As PageType
		Get
			Return Me._PageType.Entity
		End Get
		Set
			Dim previousValue As PageType = Me._PageType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PageType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PageType.Entity = Nothing
					previousValue.Pages.Remove(Me)
				End If
				Me._PageType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Pages.Add(Me)
					Me._PageType_ID = value.PageTypeID
				Else
					Me._PageType_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("PageType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Distributor")>  _
Partial Public Class Distributor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DistributorID As Long
	
	Private _DistName As String
	
	Private _DistOrderBy As System.Nullable(Of Long)
	
	Private _DistAddress As String
	
	Private _DistAddress2 As String
	
	Private _DistCity As String
	
	Private _State_ID As System.Nullable(Of Long)
	
	Private _DistZIP As String
	
	Private _DistPhone As String
	
	Private _DistFax As String
	
	Private _DistContact As String
	
	Private _DistEmail As String
	
	Private _DistContact2 As String
	
	Private _DistPhone2 As String
	
	Private _DistFax2 As String
	
	Private _DistEmail2 As String
	
	Private _DistStateKeys As EntitySet(Of DistStateKey)
	
	Private _State As EntityRef(Of State)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDistributorIDChanging(value As Long)
    End Sub
    Partial Private Sub OnDistributorIDChanged()
    End Sub
    Partial Private Sub OnDistNameChanging(value As String)
    End Sub
    Partial Private Sub OnDistNameChanged()
    End Sub
    Partial Private Sub OnDistOrderByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnDistOrderByChanged()
    End Sub
    Partial Private Sub OnDistAddressChanging(value As String)
    End Sub
    Partial Private Sub OnDistAddressChanged()
    End Sub
    Partial Private Sub OnDistAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnDistAddress2Changed()
    End Sub
    Partial Private Sub OnDistCityChanging(value As String)
    End Sub
    Partial Private Sub OnDistCityChanged()
    End Sub
    Partial Private Sub OnState_IDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnState_IDChanged()
    End Sub
    Partial Private Sub OnDistZIPChanging(value As String)
    End Sub
    Partial Private Sub OnDistZIPChanged()
    End Sub
    Partial Private Sub OnDistPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnDistPhoneChanged()
    End Sub
    Partial Private Sub OnDistFaxChanging(value As String)
    End Sub
    Partial Private Sub OnDistFaxChanged()
    End Sub
    Partial Private Sub OnDistContactChanging(value As String)
    End Sub
    Partial Private Sub OnDistContactChanged()
    End Sub
    Partial Private Sub OnDistEmailChanging(value As String)
    End Sub
    Partial Private Sub OnDistEmailChanged()
    End Sub
    Partial Private Sub OnDistContact2Changing(value As String)
    End Sub
    Partial Private Sub OnDistContact2Changed()
    End Sub
    Partial Private Sub OnDistPhone2Changing(value As String)
    End Sub
    Partial Private Sub OnDistPhone2Changed()
    End Sub
    Partial Private Sub OnDistFax2Changing(value As String)
    End Sub
    Partial Private Sub OnDistFax2Changed()
    End Sub
    Partial Private Sub OnDistEmail2Changing(value As String)
    End Sub
    Partial Private Sub OnDistEmail2Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DistStateKeys = New EntitySet(Of DistStateKey)(AddressOf Me.attach_DistStateKeys, AddressOf Me.detach_DistStateKeys)
		Me._State = CType(Nothing, EntityRef(Of State))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistributorID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DistributorID() As Long
		Get
			Return Me._DistributorID
		End Get
		Set
			If ((Me._DistributorID = value)  _
						= false) Then
				Me.OnDistributorIDChanging(value)
				Me.SendPropertyChanging
				Me._DistributorID = value
				Me.SendPropertyChanged("DistributorID")
				Me.OnDistributorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistName", DbType:="VarChar(50)")>  _
	Public Property DistName() As String
		Get
			Return Me._DistName
		End Get
		Set
			If (String.Equals(Me._DistName, value) = false) Then
				Me.OnDistNameChanging(value)
				Me.SendPropertyChanging
				Me._DistName = value
				Me.SendPropertyChanged("DistName")
				Me.OnDistNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistOrderBy", DbType:="BigInt")>  _
	Public Property DistOrderBy() As System.Nullable(Of Long)
		Get
			Return Me._DistOrderBy
		End Get
		Set
			If (Me._DistOrderBy.Equals(value) = false) Then
				Me.OnDistOrderByChanging(value)
				Me.SendPropertyChanging
				Me._DistOrderBy = value
				Me.SendPropertyChanged("DistOrderBy")
				Me.OnDistOrderByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistAddress", DbType:="VarChar(50)")>  _
	Public Property DistAddress() As String
		Get
			Return Me._DistAddress
		End Get
		Set
			If (String.Equals(Me._DistAddress, value) = false) Then
				Me.OnDistAddressChanging(value)
				Me.SendPropertyChanging
				Me._DistAddress = value
				Me.SendPropertyChanged("DistAddress")
				Me.OnDistAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistAddress2", DbType:="VarChar(50)")>  _
	Public Property DistAddress2() As String
		Get
			Return Me._DistAddress2
		End Get
		Set
			If (String.Equals(Me._DistAddress2, value) = false) Then
				Me.OnDistAddress2Changing(value)
				Me.SendPropertyChanging
				Me._DistAddress2 = value
				Me.SendPropertyChanged("DistAddress2")
				Me.OnDistAddress2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistCity", DbType:="VarChar(50)")>  _
	Public Property DistCity() As String
		Get
			Return Me._DistCity
		End Get
		Set
			If (String.Equals(Me._DistCity, value) = false) Then
				Me.OnDistCityChanging(value)
				Me.SendPropertyChanging
				Me._DistCity = value
				Me.SendPropertyChanged("DistCity")
				Me.OnDistCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State_ID", DbType:="BigInt")>  _
	Public Property State_ID() As System.Nullable(Of Long)
		Get
			Return Me._State_ID
		End Get
		Set
			If (Me._State_ID.Equals(value) = false) Then
				If Me._State.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnState_IDChanging(value)
				Me.SendPropertyChanging
				Me._State_ID = value
				Me.SendPropertyChanged("State_ID")
				Me.OnState_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistZIP", DbType:="VarChar(50)")>  _
	Public Property DistZIP() As String
		Get
			Return Me._DistZIP
		End Get
		Set
			If (String.Equals(Me._DistZIP, value) = false) Then
				Me.OnDistZIPChanging(value)
				Me.SendPropertyChanging
				Me._DistZIP = value
				Me.SendPropertyChanged("DistZIP")
				Me.OnDistZIPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistPhone", DbType:="VarChar(50)")>  _
	Public Property DistPhone() As String
		Get
			Return Me._DistPhone
		End Get
		Set
			If (String.Equals(Me._DistPhone, value) = false) Then
				Me.OnDistPhoneChanging(value)
				Me.SendPropertyChanging
				Me._DistPhone = value
				Me.SendPropertyChanged("DistPhone")
				Me.OnDistPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistFax", DbType:="VarChar(50)")>  _
	Public Property DistFax() As String
		Get
			Return Me._DistFax
		End Get
		Set
			If (String.Equals(Me._DistFax, value) = false) Then
				Me.OnDistFaxChanging(value)
				Me.SendPropertyChanging
				Me._DistFax = value
				Me.SendPropertyChanged("DistFax")
				Me.OnDistFaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistContact", DbType:="VarChar(50)")>  _
	Public Property DistContact() As String
		Get
			Return Me._DistContact
		End Get
		Set
			If (String.Equals(Me._DistContact, value) = false) Then
				Me.OnDistContactChanging(value)
				Me.SendPropertyChanging
				Me._DistContact = value
				Me.SendPropertyChanged("DistContact")
				Me.OnDistContactChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistEmail", DbType:="VarChar(50)")>  _
	Public Property DistEmail() As String
		Get
			Return Me._DistEmail
		End Get
		Set
			If (String.Equals(Me._DistEmail, value) = false) Then
				Me.OnDistEmailChanging(value)
				Me.SendPropertyChanging
				Me._DistEmail = value
				Me.SendPropertyChanged("DistEmail")
				Me.OnDistEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistContact2", DbType:="VarChar(50)")>  _
	Public Property DistContact2() As String
		Get
			Return Me._DistContact2
		End Get
		Set
			If (String.Equals(Me._DistContact2, value) = false) Then
				Me.OnDistContact2Changing(value)
				Me.SendPropertyChanging
				Me._DistContact2 = value
				Me.SendPropertyChanged("DistContact2")
				Me.OnDistContact2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistPhone2", DbType:="VarChar(50)")>  _
	Public Property DistPhone2() As String
		Get
			Return Me._DistPhone2
		End Get
		Set
			If (String.Equals(Me._DistPhone2, value) = false) Then
				Me.OnDistPhone2Changing(value)
				Me.SendPropertyChanging
				Me._DistPhone2 = value
				Me.SendPropertyChanged("DistPhone2")
				Me.OnDistPhone2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistFax2", DbType:="VarChar(50)")>  _
	Public Property DistFax2() As String
		Get
			Return Me._DistFax2
		End Get
		Set
			If (String.Equals(Me._DistFax2, value) = false) Then
				Me.OnDistFax2Changing(value)
				Me.SendPropertyChanging
				Me._DistFax2 = value
				Me.SendPropertyChanged("DistFax2")
				Me.OnDistFax2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DistEmail2", DbType:="VarChar(50)")>  _
	Public Property DistEmail2() As String
		Get
			Return Me._DistEmail2
		End Get
		Set
			If (String.Equals(Me._DistEmail2, value) = false) Then
				Me.OnDistEmail2Changing(value)
				Me.SendPropertyChanging
				Me._DistEmail2 = value
				Me.SendPropertyChanged("DistEmail2")
				Me.OnDistEmail2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Distributor_DistStateKey", Storage:="_DistStateKeys", ThisKey:="DistributorID", OtherKey:="Distributor_ID")>  _
	Public Property DistStateKeys() As EntitySet(Of DistStateKey)
		Get
			Return Me._DistStateKeys
		End Get
		Set
			Me._DistStateKeys.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="State_Distributor", Storage:="_State", ThisKey:="State_ID", OtherKey:="StateID", IsForeignKey:=true)>  _
	Public Property State() As State
		Get
			Return Me._State.Entity
		End Get
		Set
			Dim previousValue As State = Me._State.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._State.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._State.Entity = Nothing
					previousValue.Distributors.Remove(Me)
				End If
				Me._State.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Distributors.Add(Me)
					Me._State_ID = value.StateID
				Else
					Me._State_ID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("State")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DistStateKeys(ByVal entity As DistStateKey)
		Me.SendPropertyChanging
		entity.Distributor = Me
	End Sub
	
	Private Sub detach_DistStateKeys(ByVal entity As DistStateKey)
		Me.SendPropertyChanging
		entity.Distributor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SanitaryWellCost")>  _
Partial Public Class SanitaryWellCost
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SanitaryWellCostID As Long
	
	Private _SanitaryWellCost As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSanitaryWellCostIDChanging(value As Long)
    End Sub
    Partial Private Sub OnSanitaryWellCostIDChanged()
    End Sub
    Partial Private Sub OnSanitaryWellCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSanitaryWellCostChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SanitaryWellCostID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SanitaryWellCostID() As Long
		Get
			Return Me._SanitaryWellCostID
		End Get
		Set
			If ((Me._SanitaryWellCostID = value)  _
						= false) Then
				Me.OnSanitaryWellCostIDChanging(value)
				Me.SendPropertyChanging
				Me._SanitaryWellCostID = value
				Me.SendPropertyChanged("SanitaryWellCostID")
				Me.OnSanitaryWellCostIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SanitaryWellCost", DbType:="Money")>  _
	Public Property SanitaryWellCost() As System.Nullable(Of Decimal)
		Get
			Return Me._SanitaryWellCost
		End Get
		Set
			If (Me._SanitaryWellCost.Equals(value) = false) Then
				Me.OnSanitaryWellCostChanging(value)
				Me.SendPropertyChanging
				Me._SanitaryWellCost = value
				Me.SendPropertyChanged("SanitaryWellCost")
				Me.OnSanitaryWellCostChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
